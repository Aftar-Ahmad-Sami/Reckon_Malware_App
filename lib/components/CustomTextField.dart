import 'package:flutter/material.dart';

class MyTextField extends StatefulWidget {
  final String hintText;
  final TextEditingController controller;
  final FocusNode focusNode;
  final FocusNode nextFocus;
  final TextInputType inputType;
  final TextInputAction inputAction;
  final bool isPassword;
  final VoidCallback? onSubmit;
  final bool autoFocus;
  final String? Function(dynamic value) validator;
  final GlobalKey<FormFieldState<String>>? key;

  MyTextField({
    this.hintText = '',
    required this.controller,
    required this.focusNode,
    required this.nextFocus,
    this.inputType = TextInputType.text,
    this.inputAction = TextInputAction.next,
    this.onSubmit,
    this.isPassword = false,
    this.autoFocus = false,
    this.key,
    required this.validator,
  });

  @override
  _MyTextFieldState createState() => _MyTextFieldState();
}

class _MyTextFieldState extends State<MyTextField> {
  bool _obscureText = true;

  @override
  Widget build(BuildContext context) {
    return TextField(
      key: widget.key,
      controller: widget.controller,
      focusNode: widget.focusNode,
      textInputAction: widget.inputAction,
      keyboardType: widget.inputType,
      autofocus: widget.autoFocus,
      obscureText: widget.isPassword ? _obscureText : false,
      decoration: InputDecoration(
        hintText: widget.hintText,
        filled: true,
        fillColor: Colors.grey[100],

        /// enabled border
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10),
          borderSide: BorderSide(
            color: Colors.grey,
          ),
        ),

        /// focused border
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10),
          borderSide: BorderSide(
            color: Colors.black,
          ),
        ),

        focusedErrorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10),
          borderSide: BorderSide(
            color: Colors.red,
          ),
        ),
        prefixIcon: getPrefixIcon(),
        suffixIcon: widget.isPassword
            ? IconButton(
                icon: Icon(
                  _obscureText ? Icons.visibility_off : Icons.visibility,
                ),
                onPressed: () {
                  setState(() {
                    _obscureText = !_obscureText;
                  });
                },
              )
            : null,
      ),
      onSubmitted: (text) => widget.nextFocus != null
          ? FocusScope.of(context).requestFocus(widget.nextFocus)
          : widget.onSubmit != null
              ? widget.onSubmit!
              : null,
    );
  }

  getPrefixIcon() {
    if (widget.hintText == "User Name") {
      return Icon(Icons.person);
    }
    if (widget.hintText == "Email") {
      return Icon(Icons.email);
    }
    if (widget.hintText == "Password") {
      return Icon(Icons.password);
    }
    if (widget.hintText == "Confirm Password") {
      return Icon(Icons.password);
    }
  }
}
