import 'dart:async';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/material.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';

import '../constants/constants.dart';
import '../models/user_info_model.dart';
import '../views/core_pages/auth/email_verification.dart';

class GetController {
  void getData() async {
    final emailX = FirebaseAuth.instance.currentUser!.email!;
    final docRef = FirebaseFirestore.instance.collection('users').doc(emailX);

    docRef.get().then(
      (DocumentSnapshot doc) {
        final data = doc.data() as Map<String, dynamic>;
        final userInfo = UserInfoModel.fromJson(data);
        emailAllTime = userInfo.email!;
        usernameAllTime = userInfo.username!;
        numberAllTime = userInfo.phoneNumber!;
        genderAllTime = userInfo.gender!;
        passwordAllTime = userInfo.password!;
        bioAllTime = userInfo.bio!;
      },
    );
    final storageRef = FirebaseStorage.instance.ref();
    final imageUrl = await storageRef.child(emailAllTime).getDownloadURL();
    userImage = imageUrl;
  }

  void getUserImageLink() async {
    final storageRef = FirebaseStorage.instance.ref();
    final imageUrl = await storageRef.child(emailAllTime).getDownloadURL();
    userImage = imageUrl;
  }

  void loadingDialog(String normalMode) {
    showDialog(
      context: contex,
      builder: (context) {
        return Dialog(
          backgroundColor: Colors.white,
          child: Padding(
            padding: const EdgeInsets.symmetric(vertical: 20),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: const [
                SpinKitWave(
                  color: Color.fromARGB(255, 7, 106, 255),
                  size: 40,
                  type: SpinKitWaveType.center,
                ),
                SizedBox(
                  height: 25,
                ),
                Text('Loading...Please Wait')
              ],
            ),
          ),
        );
      },
    );
    Timer(
      const Duration(seconds: 3),
      () {
        Navigator.pop(contex);
      },
    );
  }

  Future createUser({
    required user,
    required password,
    required email,
  }) async {
    // Sending To Firebase Auth
    try {
      await FirebaseAuth.instance
          .createUserWithEmailAndPassword(
        email: email.trim(),
        password: password.trim(),
      )
          .then(
        (value) async {
          var userStatus = value.additionalUserInfo?.isNewUser;
          if (userStatus == true) {
            final temp =
                FirebaseFirestore.instance.collection('users').doc(email);

            final json = {
              'email': email,
              'password': password,
              'username': user,
              'bio': ""
            };
            await temp.set(json);
            await FirebaseAuth.instance.currentUser!.sendEmailVerification();

            // BuildContext can't be used in async function
            Future.delayed(Duration.zero)
                .then((value) => Navigator.pop(contex));
            Future.delayed(Duration.zero)
                .then((value) => Navigator.pushReplacement(
                      contex,
                      MaterialPageRoute(
                          builder: (context) => const VerifyEmailPage()),
                    ));
          }
        },
      );
    } catch (ex) {
      ScaffoldMessenger.of(contex).showSnackBar(
        //  String
        SnackBar(
          content: Text(
            ex.toString(),
          ),
        ),
      );
    }
  }
}
