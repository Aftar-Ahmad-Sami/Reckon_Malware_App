// Backup of home

import 'dart:convert';
import 'dart:core';
import 'package:flutter/material.dart';

import 'package:http/http.dart' as http;
import '../components/loading_progress_circular.dart';
import '../components/result_icon.dart';
import '../methods/json_data_process.dart';

var fullurl = "";

class IpCheck extends StatefulWidget {
  final String url;
  final String mode;

  const IpCheck({Key? key, required this.url, required this.mode})
      : super(key: key);

  @override
  // ignore: no_logic_in_create_state
  State<IpCheck> createState() => _IpCheckState(url, mode);
}

class _IpCheckState extends State<IpCheck> {
  var xx = "";
  var output = "";
  var data = [], data1 = [], data2 = [];
  bool isLoading = true;
  int num = 0;

  _IpCheckState(String url, String mode);

  @override
  void initState() {
    xx = "XSS";
    // if (widget.mode == "scan_url") {
    //   _getJsonDataOfURL(widget.url);
    // } else {
    _getJsonData(widget.url);
    // }
    super.initState();
  }

  delayTime({required int timeInSeconds}) async {
    return await Future.delayed(Duration(seconds: timeInSeconds), () {
      _getJsonData(widget.url);
    });
  }

  var client = http.Client();
  Future<dynamic> _getJsonData(String urll) async {
    Uri uri = Uri.parse(urll);
    var response = await client.get(
      uri,
      headers: {
        "accept": "application/json",
        "content-type": 'application/json',
        "x-apikey":
            //   "7586c4abefe3e3cf9c2d4ffffd39e383ce28ed23a2c0004d269e01e007cdd8c3",
            "bfabedb18bb569bf28fd815165172e861a30c3e816f586622751796730010bc8",
      },
    );
    if (response.statusCode == 200) {
      var conversion = jsonDecode(response.body);
      DataProcess dp = DataProcess(conversion, widget.mode);
      data = dp.list;
      if (data[0].isEmpty) {
        xx = "Empty $num";
        setState(() {});
        num++;

        await delayTime(timeInSeconds: 20);

        // Sleeping the main method
        // sleep(const Duration(seconds: 20));
        // _getJsonData(urll);

      } else {
        data1 = data[0];
        data2 = data[1];
        xx = "Success";
        //xx = data2[0];
        isLoading = false;
      }
    } else {
      xx = response.body;
    }
  }

  @override
  Widget build(BuildContext context) {
    var screenWidth = MediaQuery.of(context).size.width;
    var screenHeight = MediaQuery.of(context).size.height;

    return Scaffold(
        backgroundColor: Color.fromARGB(255, 180, 221, 255),
        body: isLoading
            ? const LoadingProgressCircular()
            : CustomScrollView(
                slivers: [
                  SliverAppBar(
                    backgroundColor: Colors.deepPurple,
                    leading: IconButton(
                      icon: const Icon(Icons.arrow_back),
                      onPressed: () {
                        Navigator.pop(context);
                      },
                    ),
                    expandedHeight: screenHeight > screenWidth ? 200 : 100,
                    floating: true,
                    flexibleSpace: FlexibleSpaceBar(
                      title: const Text('Result', textScaleFactor: 1),
                      background: Image.asset('assets/images/waterfall_bg.jpg',
                          fit: BoxFit.cover),
                    ),
                  ),
                  const SliverToBoxAdapter(
                    child: SizedBox(
                      height: 20,
                    ),
                  ),
                  SliverList(
                    delegate: SliverChildBuilderDelegate(
                      (context, index) {
                        return Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: <Widget>[
                            Card(
                                margin: EdgeInsets.only(top: 8, bottom: 8),
                                child: Container(
                                  // color: Colors.yellow,
                                  width: screenHeight > screenWidth
                                      ? screenWidth * 0.7
                                      : screenWidth * 0.7,
                                  height: screenHeight > screenWidth
                                      ? screenHeight * 0.1
                                      : screenHeight * 0.2,
                                  margin: const EdgeInsets.only(
                                      left: 20, right: 20, top: 15, bottom: 15),
                                  padding: EdgeInsets.all(5),
                                  child: Row(
                                    mainAxisAlignment:
                                        MainAxisAlignment.spaceBetween,
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    children: [
                                      Column(
                                        mainAxisAlignment:
                                            MainAxisAlignment.spaceEvenly,
                                        crossAxisAlignment:
                                            CrossAxisAlignment.start,
                                        children: [
                                          Text(
                                            data1[index],
                                            style: TextStyle(
                                              fontSize: 14,
                                              fontWeight: FontWeight.bold,
                                            ),
                                          ),
                                          Text(data2[index]),
                                        ],
                                      ),
                                      Container(
                                        margin: EdgeInsets.only(
                                            top: screenHeight * 0.03),
                                        //  color: Colors.red,
                                        child: data2[index] == "undetected"
                                            ? getResultIcon(3)
                                            : data2[index] == "malicious"
                                                ? getResultIcon(2)
                                                : getResultIcon(1),
                                      ),
                                    ],
                                  ),
                                )),
                          ],
                        );
                      },
                      childCount: data1.length,
                    ),
                  ),
                  const SliverToBoxAdapter(
                    child: SizedBox(
                      height: 20,
                    ),
                  ),
                ],
              ));
  }
}
