import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:reckonmalware/views/sign_in.dart';
import 'package:reckonmalware/views/terms_and_policy/terms_and_policy.dart';
import '../components/CustomTextField.dart';
import '../constants/constants.dart';

class SignUp extends StatefulWidget {
  const SignUp({super.key});

  @override
  State<SignUp> createState() => _SignUpState();
}

class _SignUpState extends State<SignUp> {
  final _formKey = GlobalKey<FormState>();

  bool passwordEye = true;
  bool conPasswordEye = true;
  bool success = true;

  TextEditingController usernameController = TextEditingController();
  TextEditingController emailController = TextEditingController();
  TextEditingController passwordController = TextEditingController();
  TextEditingController conPasswordController = TextEditingController();
  TextEditingController numberController = TextEditingController();

  /// focus Node
  final FocusNode userNameFocus = FocusNode();
  final FocusNode emailFocus = FocusNode();
  final FocusNode passFocus = FocusNode();
  final FocusNode conPassFocus = FocusNode();
  final FocusNode nullFocus = FocusNode();

  @override
  Widget build(BuildContext context) {
    double screenWidth = MediaQuery.of(context).size.width;
    double screenHeight = MediaQuery.of(context).size.height;
    return Listener(
      onPointerDown: (PointerDownEvent event) =>
          FocusManager.instance.primaryFocus?.unfocus(),
      child: Scaffold(
        body: Container(
          height: screenHeight,
          width: screenWidth,
          decoration: BoxDecoration(
            color: Color.fromARGB(255, 123, 149, 185),
            //color: Colors.transparent,
            image: DecorationImage(
              image: AssetImage(
                "assets/images/signup_bg.jpg",
              ),
              colorFilter: new ColorFilter.mode(
                  Colors.black.withOpacity(0.6), BlendMode.dstATop),
              fit: BoxFit.cover,
            ),
          ),
          child: Center(
            child: SingleChildScrollView(
              physics: const BouncingScrollPhysics(
                  parent: AlwaysScrollableScrollPhysics()),
              child: Form(
                key: _formKey,
                child: Padding(
                  padding: EdgeInsets.only(
                    right: screenWidth * 0.05,
                    left: screenWidth * 0.05,
                  ),
                  child: Column(
                    children: [
                      ///
                      SizedBox(height: screenHeight * 0.05),

                      ///
                      Text(
                        'Create\nAccount',
                        style: TextStyle(
                          /// Shadow
                          shadows: [
                            BoxShadow(
                              color: Color.fromRGBO(0, 0, 0, 0.4),
                              offset: const Offset(
                                0.0,
                                6.0,
                              ),
                              blurRadius: 5,
                              spreadRadius: 0.7,
                            ), //BoxShadow
                            BoxShadow(
                              color: Colors.white,
                              offset: const Offset(0.0, 0.0),
                              blurRadius: 0.0,
                              spreadRadius: 0.0,
                            ), //BoxShadow
                          ],

                          /// Font Style
                          color: Colors.white,
                          fontFamily: 'KaushanScript',
                          fontSize: 50,
                          fontStyle: FontStyle.italic,
                          fontWeight: FontWeight.bold,
                        ),
                        textAlign: TextAlign.center,
                      ),

                      ///
                      SizedBox(height: screenHeight * 0.05),

                      MyTextField(
                        hintText: 'User Name',
                        inputType: TextInputType.text,
                        focusNode: userNameFocus,
                        nextFocus: emailFocus,
                        controller: usernameController,
                        validator: (value) {
                          if (value!.isEmpty) {
                            return 'user Name cannot empty';
                          }
                          return null;
                        },
                      ),
                      SizedBox(height: screenHeight * 0.025),

                      MyTextField(
                        hintText: 'Email',
                        inputType: TextInputType.emailAddress,
                        focusNode: emailFocus,
                        nextFocus: passFocus,
                        controller: emailController,
                        validator: (value) {
                          RegExp regex =
                              RegExp(r"^[a-z0-9+_.-]+@[a-z.-]+.[a-z]");

                          /**
                              This email field can take ----------
                              -> only small letter,special character(such as '_' and '.') and numerical value before @ sign
                              -> lower case and special character (such as '.') between "@" and "." sign
                              -> only lower case letter after "."
                              -> For example : "example@gmail.com"
                           **/

                          if (value!.isEmpty) {
                            return 'Please Enter an email address';
                          }
                          if (!regex.hasMatch(value)) {
                            return 'Please a valid Email';
                          }
                          return null;
                        },
                      ),
                      SizedBox(height: screenHeight * 0.025),

                      MyTextField(
                        hintText: 'Password',
                        inputType: TextInputType.visiblePassword,
                        focusNode: passFocus,
                        nextFocus: conPassFocus,
                        controller: passwordController,
                        isPassword: true,

                        /// Password validator
                        validator: (value) {
                          RegExp regex = RegExp(
                              r'^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[!@#\$&*~]).{8,}$');
                          /**
                              This password field need the following characteristics to validate
                              -> Must contain uppercase letter
                              -> Must contain lowercase letter
                              -> Must contain special character
                              -> Must contain numerical character
                              -> Must contain 8 values in minimum
                              -> No limit in the highest number of characters to validate
                           **/
                          if (value!.isEmpty) {
                            return 'Please Enter password';
                          }
                          if (!regex.hasMatch(value)) {
                            return 'Password must contain at least eight characters including digit,\nuppercase-lowercase letter and special characters(!@#\$&*~)';
                          }
                          return null;
                        },
                      ),
                      SizedBox(height: screenHeight * 0.025),

                      MyTextField(
                        hintText: 'Confirm Password',
                        inputType: TextInputType.name,
                        focusNode: conPassFocus,
                        nextFocus: nullFocus,
                        controller: conPasswordController,
                        isPassword: true,

                        /// Confirm Password Filed validation
                        validator: (value) {
                          if (value!.isEmpty) {
                            return 'Please retype password';
                          }
                          if (value != passwordController.text) {
                            return 'Not Match';
                          }
                          return null;
                        },
                      ),

                      ///
                      SizedBox(height: screenHeight * 0.02),

                      /// terms and policy
                      TermsAndPolicy(),

                      ///
                      SizedBox(height: screenHeight * 0.02),

                      ///
                      ElevatedButton(
                        style: ElevatedButton.styleFrom(
                          fixedSize: Size(screenWidth, screenHeight * 0.065),
                          backgroundColor: Color.fromARGB(205, 47, 168, 233),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(50),
                          ),
                        ),
                        child: Text(
                          "Sign Up",
                          textAlign: TextAlign.left,
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 30,
                            fontStyle: FontStyle.italic,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        onPressed: () {
                          if (_formKey.currentState!.validate()) {
                            ScaffoldMessenger.of(context).showSnackBar(
                              const SnackBar(
                                content: Text(
                                  'Processing Data',
                                ),
                              ),
                            );
                            contex = context;
                            final un = usernameController.text;
                            final pw = passwordController.text;
                            final em = emailController.text;

                            allControl.createUser(
                              user: un,
                              password: pw,
                              email: em,
                            );
                          }
                        },
                      ),

                      ///
                      SizedBox(height: screenHeight * 0.02),

                      ///
                      RichText(
                        text: TextSpan(
                          text: 'Already have an account? ',
                          style: TextStyle(
                            fontFamily: 'Itim-Regular',
                            fontSize: 18,
                            color: Color.fromARGB(255, 71, 64, 64),
                            fontWeight: FontWeight.w500,
                          ),
                          children: [
                            TextSpan(
                              text: 'Sign in',
                              style: TextStyle(
                                //decoration: TextDecoration.underline,
                                fontFamily: 'Itim-Regular',
                                fontWeight: FontWeight.w900,
                                fontStyle: FontStyle.italic,
                                fontSize: 18,
                                color: Color.fromARGB(255, 71, 64, 64),
                              ),
                              recognizer: TapGestureRecognizer()
                                ..onTap = () {
                                  Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder: (context) => SignIn(),
                                    ),
                                  );
                                },
                            )
                          ],
                        ),
                      ),

                      SizedBox(height: screenHeight * 0.04),

                      ///
                      Text(
                        '© Team Wreck-On',
                        style: TextStyle(
                          color: Colors.black,
                          fontFamily: 'Itim-Regular',
                          fontWeight: FontWeight.w400,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}
