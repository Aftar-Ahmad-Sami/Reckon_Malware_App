import 'package:flutter/material.dart';
import 'package:reckonmalware/constants/object_constants.dart';

import '../components/uniform_app_bar.dart';
import '../components/uniform_drawer.dart';
import '../constants/constants.dart';

class BugReport extends StatefulWidget {
  const BugReport({super.key});

  @override
  State<BugReport> createState() => _BugReportState();
}

class _BugReportState extends State<BugReport> {
  TextEditingController _bugReportController = TextEditingController();
  bool submit = false;
  String dropdownvalue = 'Internet Issue';
  List<String> problems = [
    'Internet Issue',
    'Slow Performance',
    'App Crash',
    'Glitch',
    'Error Message',
    'Function\'s Not Working',
    'Others'
  ];

  @override
  Widget build(BuildContext context) {
    var widthX = MediaQuery.of(context).size.width;
    var heightX = MediaQuery.of(context).size.height;
    return Listener(
      onPointerDown: (PointerDownEvent event) =>
          FocusManager.instance.primaryFocus?.unfocus(),
      child: Scaffold(
        extendBodyBehindAppBar: true,
        appBar: UniformAppBar(titleName: "Bug Report"),
        drawer: const UniformDrawer(),
        body: SingleChildScrollView(
          physics: const BouncingScrollPhysics(
              parent: AlwaysScrollableScrollPhysics()),
          child: Container(
            width: widthX,
            height: heightX,
            decoration: const BoxDecoration(
                gradient: LinearGradient(
                    colors: [Colors.red, Colors.black],
                    begin: Alignment.topLeft,
                    end: Alignment.center)),
            child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  Icon(
                    Icons.bug_report,
                    size: 100,
                    color: Colors.amber[300],
                  ),
                  const SizedBox(height: 20),
                  Container(
                    padding: const EdgeInsets.all(10),
                    // decoration: BoxDecoration(
                    //     color: Colors.white,
                    //     borderRadius: BorderRadius.circular(20)),
                    child: DropdownButton(
                      value: dropdownvalue,
                      style: const TextStyle(),
                      icon: const Icon(Icons.keyboard_arrow_down),
                      items: problems.map((String items) {
                        return DropdownMenuItem(
                          value: items,
                          child: Text(
                            items,
                            style: TextStyle(
                                color: items == dropdownvalue
                                    ? Colors.white
                                    : Colors.black,
                                fontWeight: FontWeight.bold),
                          ),
                        );
                      }).toList(),
                      onChanged: (String? newValue) {
                        setState(() {
                          dropdownvalue = newValue!;
                        });
                      },
                    ),
                  ),
                  const SizedBox(height: 50),
                  // Padding(
                  //   padding: const EdgeInsets.only(right: 20.0, bottom: 20),
                  //   child: Align(
                  //     alignment: Alignment.topRight,
                  //     child: InkWell(
                  //       child: Text(
                  //         'Clear',
                  //         style: TextStyle(
                  //           fontSize: 20,
                  //           color: _bugReportController.text.isEmpty
                  //               ? Colors.grey
                  //               : Colors.white,
                  //         ),
                  //       ),
                  //       onTap: () => setState(() {
                  //         submit = true;
                  //         _bugReportController.text.isNotEmpty
                  //             ? _bugReportController.clear()
                  //             : null;
                  //       }),
                  //     ),
                  //   ),
                  // ),
                  SizedBox(
                    width: widthX * 0.9,
                    height: heightX * .350,
                    child: TextFormField(
                      controller: _bugReportController,
                      textAlign: TextAlign.start,
                      textAlignVertical: TextAlignVertical.top,
                      expands: true,
                      minLines: null,
                      maxLines: null,
                      decoration: InputDecoration(
                          suffixIcon: IconButton(
                              padding: EdgeInsets.only(bottom: heightX * 0.268),
                              onPressed: () {
                                _bugReportController.clear();
                              },
                              icon: Icon(Icons.clear)),
                          fillColor: Colors.white,
                          filled: true,
                          hintText: 'Report Here',
                          hintStyle: TextStyle(),
                          border: OutlineInputBorder()),
                    ),
                  ),
                  const SizedBox(height: 30),
                  Container(
                    width: 0.9 * widthX,
                    color: Colors.amberAccent,
                    child: ElevatedButton(
                        style: ElevatedButton.styleFrom(
                            elevation: 0,
                            shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(30)),
                            backgroundColor: Colors.transparent,
                            foregroundColor: Colors.black),
                        onPressed: () {
                          if (_bugReportController.text == "") {
                            ScaffoldMessenger.of(context).showSnackBar(
                                SnackBar(content: Text("EMPTY FIELD")));
                            return;
                          }
                          contex = context;
                          feedbackBugControl.createBugReport(
                            problem: dropdownvalue,
                            details: _bugReportController.text,
                          );

                          submit = true;
                        },
                        child: const Text("Submit")),
                  )
                ]),
          ),
        ),
      ),
    );
  }
}
