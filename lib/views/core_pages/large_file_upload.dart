import 'dart:io';

import 'package:crypto/crypto.dart';
import 'package:dio/dio.dart';
import 'package:file_picker/file_picker.dart';
import 'package:flutter/material.dart';
import 'package:open_file/open_file.dart';
import 'package:get/get.dart' as gt;

import '../../components/snackbar.dart';
import '../../components/uniform_app_bar.dart';
import '../../components/uniform_drawer.dart';
import '../error_pages/error_404.dart';
import 'result_pages/result_page.dart';

class LargeFileUpload extends StatefulWidget {
  const LargeFileUpload({super.key});

  @override
  State<LargeFileUpload> createState() => _LargeFileUploadState();
}

class _LargeFileUploadState extends State<LargeFileUpload> {
  String fileName = "";
  String? filePath = "";
  late PlatformFile fileForUpload;
  late String fileReportUrl;
  bool isReadyForUpload = false;

  @override
  Widget build(BuildContext context) {
    var screenHeight = MediaQuery.of(context).size.height;
    var screenWidth = MediaQuery.of(context).size.width;
    return Listener(
      onPointerDown: (PointerDownEvent event) =>
          FocusManager.instance.primaryFocus?.unfocus(),
      child: Scaffold(
        backgroundColor: Color.fromARGB(255, 66, 20, 139),
        drawer: const UniformDrawer(),
        appBar: UniformAppBar(titleName: "Upload Large File"),
        body: Padding(
          padding:
              const EdgeInsets.only(left: 20, right: 20, bottom: 0, top: 120),
          child: Container(
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(25),
              color: Color.fromARGB(255, 140, 76, 243),
            ),
            height: screenHeight * 0.550,
            child: Container(
                alignment: Alignment.center,
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(
                      'UPLOAD FILES',
                      style: TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                          color: Colors.white),
                    ),
                    SizedBox(
                      height: screenHeight * 0.010,
                    ),
                    Text(
                      'Upload Documents you want to scan.',
                      style: TextStyle(
                          fontSize: 17,
                          fontWeight: FontWeight.normal,
                          color: Colors.white),
                    ),
                    SizedBox(
                      height: 20,
                    ),
                    selectedFileBox(screenWidth, screenHeight),
                    const SizedBox(
                      height: 5,
                    ),
                    selectAndScanButtons(screenWidth, screenHeight),
                  ],
                )),
          ),
        ),
      ),
    );
  }

  Widget selectedFileBox(double wwidth, double hheight) {
    return Container(
        width: wwidth * 0.8,
        height: hheight * 0.32,
        padding: const EdgeInsets.only(left: 25, right: 10),
        decoration: BoxDecoration(
          color: const Color.fromRGBO(255, 255, 255, 0.3),
          borderRadius: BorderRadius.circular(25),
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Text(
              'Drop Your File Here',
              style: TextStyle(fontSize: 15, color: Colors.white),
            ),
            SizedBox(
              height: 20,
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                GestureDetector(
                  onTap: () async {
                    if (filePath == "") return;
                    String filepath = filePath.toString();
                    await OpenFile.open(filepath);
                    setState(() {});
                  },
                  child: Container(
                    width: 160,
                    height: 50,
                    color: Colors.transparent,
                    alignment: Alignment.center,
                    child: Text(
                      fileName,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                ),
                IconButton(
                  icon: const Icon(Icons.cancel_rounded),
                  color: Colors.white,
                  iconSize: 35,
                  onPressed: () {
                    fileName = "";
                    filePath = "";
                    isReadyForUpload = false;
                    setState(() {});
                  },
                )
              ],
            ),
            SizedBox(
              height: 050,
            ),
            ElevatedButton(
              child: const Text("Browse Files"),
              style: ElevatedButton.styleFrom(backgroundColor: Colors.black),
              onPressed: () async {
                final select = await FilePicker.platform.pickFiles();
                if (select == null) return;

                final file = select.files.first;

                fileForUpload = file;
                isReadyForUpload = true;

                fileName = file.name;
                filePath = file.path;
                setState(() {});
              },
            ),
          ],
        ));
  }

  Widget selectAndScanButtons(double wwidth, double hheight) {
    return Container(
      width: wwidth * 0.7,
      padding: const EdgeInsets.only(left: 15),
      child: ElevatedButton.icon(
        label: const Text("Scan"),
        icon: Icon(Icons.search),
        style: ElevatedButton.styleFrom(backgroundColor: Colors.black),
        onPressed: () async {
          if (isReadyForUpload) {
            getSpecialLink();
          } else {
            ScaffoldMessenger.of(context).showSnackBar(warningSnackBar());
          }
        },
      ),
    );
  }

  void getSpecialLink() async {
    try {
      var response =
          await Dio().get("https://www.virustotal.com/api/v3/files/upload_url",
              options: Options(headers: {
                "accept": "application/json",
                "x-apikey":
                    "7586c4abefe3e3cf9c2d4ffffd39e383ce28ed23a2c0004d269e01e007cdd8c3",
              }));
      if (response.statusCode == 200) {
        var res = response.data;
        String s = res['data'];
        uploadFile(fileForUpload, s);
      }
    } on Exception {
      gt.Get.back();
      gt.Get.to(const Error404());
    }
  }

  Future<String> hashingFile(String path) async {
    File file = File(path);
    late String out;
    try {
      final stream = file.openRead();
      final hash = await md5.bind(stream).first;
      out = hash.toString();
    } catch (e) {
      return "Hashing Problem: ${e.toString()}";
    }
    return 'https://www.virustotal.com/api/v3/files/$out';
  }

  void uploadFile(fileForUpload, specialLink) async {
    try {
      FormData formdata = FormData.fromMap({
        "file":
            await MultipartFile.fromFile(fileForUpload.path, filename: fileName)
      });
      var response = await Dio().post(
        specialLink,
        data: formdata,
        options: Options(headers: {
          "accept": "application/json",
          "x-apikey":
              "7586c4abefe3e3cf9c2d4ffffd39e383ce28ed23a2c0004d269e01e007cdd8c3",
        }),
      );

      if (response.statusCode == 200) {
        fileReportUrl = await hashingFile(fileForUpload.path);
        gt.Get.to(ResultPage(url: fileReportUrl, mode: "report"));
      } else {
        gt.Get.to(const Error404());
      }
    } on Exception {
      gt.Get.to(const Error404());
    }
  }
}
