import 'dart:io';

import 'package:crypto/crypto.dart';
import 'package:dio/dio.dart';
import 'package:file_picker/file_picker.dart';
import 'package:flutter/material.dart';
import 'package:open_file/open_file.dart';
import 'package:get/get.dart' as gt;

import '../../components/snackbar.dart';
import '../../components/uniform_app_bar.dart';
import '../../components/uniform_drawer.dart';
import '../error_pages/error_404.dart';
import 'result_pages/result_page.dart';

class LargeFileUpload extends StatefulWidget {
  const LargeFileUpload({super.key});

  @override
  State<LargeFileUpload> createState() => _LargeFileUploadState();
}

class _LargeFileUploadState extends State<LargeFileUpload> {
  String fileName = "";
  String? filePath = "";
  late PlatformFile fileForUpload;
  late String fileReportUrl;
  bool isReadyForUpload = false;

  @override
  Widget build(BuildContext context) {
    double screenHeight = MediaQuery.of(context).size.height;
    double screenWidth = MediaQuery.of(context).size.width;
    return Listener(
      onPointerDown: (PointerDownEvent event) =>
          FocusManager.instance.primaryFocus?.unfocus(),
      child: Scaffold(
        backgroundColor: const Color.fromARGB(255, 255, 65, 52),
        drawer: const UniformDrawer(),
        appBar: UniformAppBar(titleName: "Upload Large File"),
        body: Container(
          alignment: Alignment.center,
          child: screenHeight > screenWidth
              ? Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    selectedFileBox(screenWidth, screenHeight),
                    const SizedBox(
                      height: 20,
                    ),
                    selectAndScanButtons(screenWidth, screenHeight),
                  ],
                )
              : Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        selectedFileBox(screenWidth, screenHeight),
                        const SizedBox(
                          width: 40,
                        ),
                        selectAndScanButtons(screenWidth, screenHeight),
                      ],
                    ),
                    SizedBox(
                      height: screenHeight * 0.2,
                    )
                  ],
                ),
        ),
      ),
    );
  }

  Widget selectedFileBox(double wwidth, double hheight) {
    return Container(
        width: hheight > wwidth ? wwidth * 0.8 : wwidth * 0.5,
        height: hheight > wwidth ? 125 : 100,
        padding:
            const EdgeInsets.only(top: 25, bottom: 25, left: 25, right: 10),
        decoration: BoxDecoration(
          color: const Color.fromRGBO(255, 255, 255, 0.3),
          borderRadius: BorderRadius.circular(25),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          //     crossAxisAlignment: CrossAxisAlignment.end,
          children: [
            GestureDetector(
              onTap: () async {
                if (filePath == "") return;
                String filepath = filePath.toString();
                await OpenFile.open(filepath);
                setState(() {});
              },
              child: Container(
                width: 160,
                height: 50,
                color: Colors.transparent,
                alignment: Alignment.center,
                child: Text(
                  fileName,
                  overflow: TextOverflow.ellipsis,
                ),
              ),
            ),
            IconButton(
              icon: const Icon(Icons.cancel_rounded),
              color: Colors.white,
              // alignment: Alignment.bottomLeft,
              iconSize: 35,
              onPressed: () {
                fileName = "";
                filePath = "";
                isReadyForUpload = false;
                setState(() {});
              },
            )
          ],
        ));
  }

  Widget selectAndScanButtons(double wwidth, double hheight) {
    return SizedBox(
      //  color: Colors.red,
      height: 150,
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          ElevatedButton(
            child: const Text("Select File"),
            onPressed: () async {
              final select = await FilePicker.platform.pickFiles();
              if (select == null) return;

              final file = select.files.first;

              fileForUpload = file;
              isReadyForUpload = true;

              fileName = file.name;
              filePath = file.path;
              setState(() {});
            },
          ),
          const SizedBox(height: 50),
          ElevatedButton(
            child: const Text("Scan"),
            onPressed: () async {
              if (isReadyForUpload) {
                getSpecialLink();
              } else {
                ScaffoldMessenger.of(context).showSnackBar(warningSnackBar());
              }
              //  Get.to(HomePage(url: _url)) : setState(() {});
            },
          ),
        ],
      ),
    );
  }

  void getSpecialLink() async {
    var response =
        await Dio().get("https://www.virustotal.com/api/v3/files/upload_url",
            options: Options(headers: {
              "accept": "application/json",
              "x-apikey":
                  "7586c4abefe3e3cf9c2d4ffffd39e383ce28ed23a2c0004d269e01e007cdd8c3",
            }));
    if (response.statusCode == 200) {
      var res = response.data;
      String s = res['data'];
      uploadFile(fileForUpload, s);
    }
  }

  Future<String> hashingFile(String path) async {
    File file = File(path);
    late String out;
    // if (!file.existsSync()) {
    //   //var warning = WarningSnackBar();
    //   ScaffoldMessenger.of(context).showSnackBar(warningSnackBar());
    //   //setState(() {});
    //   return "";
    // }

    try {
      final stream = file.openRead();
      final hash = await md5.bind(stream).first;
      out = hash.toString();
    } catch (e) {
      return "Hashing Problem: ${e.toString()}";
    }
    // out = "8638c096d8fbe36d0269979c40de1607";
    return 'https://www.virustotal.com/api/v3/files/$out';
  }

  void uploadFile(fileForUpload, specialLink) async {
    try {
      FormData formdata = FormData.fromMap({
        "file":
            await MultipartFile.fromFile(fileForUpload.path, filename: fileName)
      });
      var response = await Dio().post(
        specialLink,
        data: formdata,
        options: Options(headers: {
          "accept": "application/json",
          "x-apikey":
              "7586c4abefe3e3cf9c2d4ffffd39e383ce28ed23a2c0004d269e01e007cdd8c3",
        }),
      );

      if (response.statusCode == 200) {
        // var x = IdAnalysis.fromJson(response.data);
        // var y = x.data.id;
        // var response2 = await Dio().get(
        //   "https://www.virustotal.com/api/v3/analyses/${y}",
        //   options: Options(headers: {
        //     "accept": "application/json",
        //     "x-apikey":
        //         "7586c4abefe3e3cf9c2d4ffffd39e383ce28ed23a2c0004d269e01e007cdd8c3",
        //   }),
        // );

        // ---------------->>>>>>>

        //  "id": YTNhZDVkYmI0ODM0OGRkNjUwNjRmZDQwNmIyMWM4OTA6MTY2ODg0Nzk5Ng==

        fileReportUrl = await hashingFile(fileForUpload.path);
        gt.Get.to(ResultPage(url: fileReportUrl, mode: "report"));
      } else {
        //     print(response.statusCode);
      }
    } catch (e) {
      //   print(e);
      gt.Get.to(const Error404());
    }
  }
}

// AMmfu6bHOPYh9gS4acZv3TZ4p9B8Gw2fw5NDj0r_N6jwDMar6GVg9sbz1dysI4MH9gkk9sC38BreIprv9pl-3G23yVSGjHw1yJSUlhy1NcECkQG_c7oztz9wiXG9yV33gqOLnq4sEA31X9na5tFpEdX8We8E-qd1S63ewknkcaLBHtRuh9tV7klADtRKBO8x-QNSZB-hSErY7EKMuSZexGDV4ZZ6b0D7gIuw0Db8xnCWS7LLQ-4Sf9hK3s7oTfEVN7J7zO_9Ij26LEamJxPdCGQNFAa-PEnKIaY8okb0d82cTZlVjMHFBlc9kt3h1NEEVmhj-5ixrriNSrILkLL72jNB0VvoKeAtNRh3ub3n03vj5FUDygjW2UM4zYfCfnvMhWi75UOWTB8ESCuvfYwW88Vb6mDOlfWE6Nkn0BWXYWJWMaUs2q-c59qTirsziDpSvf3AWeLPV_AoKOEnbMd9OUBJH0mTYcLHL_y315zR_kaAZ_HzLr4tdNBKTy73L4_0Qcc0R2LRk176jqPiINptrqkW6fgac4umHPO9n-M9U2WNsBVzX0XIv16jlFRhCtOjo0JzRuYPJ6JoCSYPV4MWWivM7y2765WxDAOnLaRiqB4h-dJjHZKAh7cdWWy8hDlsgYV6h0QUAOJNNzF-odKg2F1qiuG7PO18CsvlrdAFUDDFmNdrx3BHsUiI4o9vcr2WmGIbbUBsA1cuGgsOSF2pacIoh83fUK4OQgJ7zN2skIm50rzY1dQP45by1KyWQRM5R2xSrUFVbAoOyrjR4ZHxgQUSoD0mh8Lzw-NqcVajx9GcSQnmTdwliU0Sl9QxC3-ChEV6eG_XdnBfgv4t1dK-Z2G9MLFcu8TPEuMomgC9k84ZVZ13ls0EBBSIZDPVm-TdvBhMG4H2f6NvpqLmPcziFd-jf8JCZOqS0dR972amwThk2IFFXtAUPCpGurRmh8kSm6cNnbazFqfiWy4IiB_THAl6CyZRyqx8ed1D7ZLS1pw4pye3ZObztxDZF5Tk3fpEdEgDrbfKS9TSS5-PE5NW93jQttmjszU10Yitj3gVT8NuDqqSdZzL9njGqQNV7eBB7zC4jWztv0-iJBJQFmGlbM8lVfwTouj5_m70dkY5DnRwkENGQ0aWywK65O8vFZ5TOYUuIjaMZTrcxo-UbBo79_14tnsEUjKxV7W8Crzc7yHTAgnlhzOMOsVEnqtuxfGTQm85aI5WOJDPY47CT3F9635YNe8MdnSnzznUIaxGtS25uASxDybxL9I/ALBNUaYAAAAAY5sCB6bR8nRc6dcCu-IQc3vrd1_fM6_y/

