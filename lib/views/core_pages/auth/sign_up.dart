import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:reckonmalware/views/terms_and_policy/terms_and_policy.dart';

import '../../../constants/constants.dart';
import '../../../constants/object_constants.dart';
import 'sign_in.dart';

class SignUp extends StatefulWidget {
  const SignUp({super.key});

  @override
  State<SignUp> createState() => _SignUpState();
}

class _SignUpState extends State<SignUp> {
  final _formKey = GlobalKey<FormState>();

  final TextEditingController usernameController = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();
  final TextEditingController conPasswordController = TextEditingController();

  /// focus Node
  final FocusNode userNameFocus = FocusNode();
  final FocusNode emailFocus = FocusNode();
  final FocusNode passFocus = FocusNode();
  final FocusNode conPassFocus = FocusNode();
  final FocusNode nullFocus = FocusNode();

  //
  bool passwordEye = true;
  bool conPasswordEye = true;

  @override
  Widget build(BuildContext context) {
    double screenWidth = MediaQuery.of(context).size.width;
    double screenHeight = MediaQuery.of(context).size.height;
    return Listener(
      onPointerDown: (PointerDownEvent event) =>
          FocusManager.instance.primaryFocus?.unfocus(),
      child: Scaffold(
        extendBodyBehindAppBar: true,
        appBar: AppBar(
          elevation: 0,
          backgroundColor: Colors.transparent,
          leading: IconButton(
              onPressed: () {
                Navigator.pop(context);
              },
              icon: Icon(Icons.arrow_back_ios)),
        ),
        body: Container(
          height: screenHeight,
          width: screenWidth,
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [
                Color.fromARGB(255, 11, 49, 102),
                //Color.fromARGB(255, 93, 228, 238),
                Color.fromARGB(237, 88, 13, 13),
              ],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
          child: Center(
            child: SingleChildScrollView(
              physics: const BouncingScrollPhysics(
                  parent: AlwaysScrollableScrollPhysics()),
              child: Form(
                key: _formKey,
                child: Column(
                  children: [
                    //
                    // SizedBox(
                    //   height: screenHeight * 0.02,
                    //   child: Align(
                    //     alignment: Alignment.centerLeft,
                    //     child: IconButton(
                    //       onPressed: () {
                    //         Navigator.pop(context);
                    //       },
                    //       icon: Icon(
                    //         Icons.arrow_back,
                    //         color: Colors.white,
                    //         size: 30,
                    //       ),
                    //     ),
                    //   ),
                    // ),

                    ///
                    // Align(
                    //   alignment: Alignment.topLeft,
                    //   child: Positioned(
                    //       top: 30,
                    //       left: 30,
                    //       child: IconButton(
                    //           onPressed: () {
                    //             Navigator.push(
                    //                 context,
                    //                 MaterialPageRoute(
                    //                     builder: (Context) => SignIn()));
                    //           },
                    //           icon: Icon(
                    //             Icons.arrow_back_ios_new_rounded,
                    //             color: Colors.white,
                    //           ))),
                    // ),
                    SizedBox(height: screenHeight * 0.03),

                    ///
                    const Text(
                      'Create\nAccount',
                      style: TextStyle(
                        /// Shadow
                        shadows: [
                          BoxShadow(
                            color: Color.fromRGBO(0, 0, 0, 0.4),
                            offset: Offset(
                              0.0,
                              6.0,
                            ),
                            blurRadius: 5,
                            spreadRadius: 0.7,
                          ), //BoxShadow
                          BoxShadow(
                            color: Colors.white,
                            offset: Offset(0.0, 0.0),
                            blurRadius: 0.0,
                            spreadRadius: 0.0,
                          ), //BoxShadow
                        ],

                        /// Font Style
                        //color: Color.fromARGB(255, 255, 221, 71),
                        color: Colors.white,
                        fontFamily: 'KaushanScript',
                        fontSize: 50,
                        fontStyle: FontStyle.italic,
                        fontWeight: FontWeight.bold,
                      ),
                      textAlign: TextAlign.center,
                    ),

                    ///
                    SizedBox(height: screenHeight * 0.05),

                    Padding(
                      padding: EdgeInsets.only(
                          right: screenWidth * 0.05, left: screenWidth * 0.05),
                      child: TextFormField(
                        controller: usernameController,
                        keyboardType: TextInputType.text,
                        textInputAction: TextInputAction.next,
                        style: const TextStyle(
                          fontFamily: 'Itim-Regular',
                          fontSize: 18,
                        ),
                        decoration: InputDecoration(
                          hintText: 'User Name',
                          filled: true,
                          fillColor: Colors.grey[100],
                          prefixIcon: const Icon(Icons.person),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: const BorderSide(
                              color: Colors.black,
                            ),
                          ),
                          enabledBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: const BorderSide(
                              color: Colors.grey,
                            ),
                          ),
                          focusedBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: const BorderSide(
                              color: Colors.yellow,
                              width: 2.5,
                            ),
                          ),
                        ),
                        validator: (value) {
                          if (value!.isEmpty) {
                            return 'user Name cannot empty';
                          }
                          return null;
                        },
                        focusNode: userNameFocus,
                        onEditingComplete: () =>
                            FocusScope.of(context).requestFocus(emailFocus),
                      ),
                    ),
                    SizedBox(height: screenHeight * 0.025),

                    /// Email field
                    Padding(
                      padding: EdgeInsets.only(
                          right: screenWidth * 0.05, left: screenWidth * 0.05),
                      child: TextFormField(
                        controller: emailController,
                        focusNode: emailFocus,
                        onEditingComplete: () =>
                            FocusScope.of(context).requestFocus(passFocus),
                        keyboardType: TextInputType.emailAddress,
                        textInputAction: TextInputAction.next,
                        style: const TextStyle(
                          fontFamily: 'Itim-Regular',
                          fontSize: 18,
                        ),
                        decoration: InputDecoration(
                          hintText: 'Email',
                          filled: true,
                          fillColor: Colors.grey[100],
                          prefixIcon: const Icon(Icons.email),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: const BorderSide(
                              color: Colors.black,
                            ),
                          ),
                          enabledBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: const BorderSide(
                              color: Colors.grey,
                            ),
                          ),
                          focusedBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: const BorderSide(
                              color: Colors.yellow,
                              width: 2.5,
                            ),
                          ),
                        ),

                        /// email validator
                        validator: (value) {
                          RegExp regex = RegExp(r"^[a-z0-9]+@[a-z]+.[a-z]+$");
                          if (value!.isEmpty) {
                            return 'Please enter an email address';
                          }
                          if (!regex.hasMatch(value)) {
                            return 'Please enter a valid Email';
                          }
                          return null;
                        },
                      ),
                    ),
                    SizedBox(height: screenHeight * 0.025),

                    /// Password field
                    Padding(
                      padding: EdgeInsets.only(
                          right: screenWidth * 0.05, left: screenWidth * 0.05),
                      child: TextFormField(
                        controller: passwordController,
                        focusNode: passFocus,
                        onEditingComplete: () =>
                            FocusScope.of(context).requestFocus(conPassFocus),
                        keyboardType: TextInputType.text,
                        textInputAction: TextInputAction.next,
                        obscureText: passwordEye,
                        style: const TextStyle(
                          fontFamily: 'Itim-Regular',
                          fontSize: 18,
                        ),
                        decoration: InputDecoration(
                          hintText: 'Password',
                          filled: true,
                          fillColor: Colors.grey[100],
                          prefixIcon: const Icon(Icons.lock),
                          suffixIcon: IconButton(
                            onPressed: () {
                              setState(() {
                                passwordEye = !passwordEye;
                              });
                            },
                            icon: Icon(
                              passwordEye
                                  ? Icons.visibility_off
                                  : Icons.visibility,
                              color: Colors.black54,
                            ),
                          ),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: const BorderSide(
                              color: Colors.black,
                            ),
                          ),
                          enabledBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: const BorderSide(
                              color: Colors.grey,
                            ),
                          ),
                          focusedBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: const BorderSide(
                              color: Colors.yellow,
                              width: 2.5,
                            ),
                          ),
                        ),
                        validator: (value) {
                          RegExp regex = RegExp(
                              r'^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[!@#\$&*~]).{8,}$');
                          if (value!.isEmpty) {
                            return 'Please Enter password';
                          }
                          if (!regex.hasMatch(value)) {
                            return 'Password must contain at least eight characters including : \n\t\t• digit \n\t\t• uppercase-lowercase letter and \n\t\t• special characters (!@#\$&*~)';
                          }
                          return null;
                        },
                      ),
                    ),
                    SizedBox(height: screenHeight * 0.025),
                    Padding(
                      padding: EdgeInsets.only(
                          right: screenWidth * 0.05, left: screenWidth * 0.05),
                      child: TextFormField(
                        controller: conPasswordController,
                        focusNode: conPassFocus,
                        keyboardType: TextInputType.text,
                        textInputAction: TextInputAction.done,
                        obscureText: conPasswordEye,
                        style: const TextStyle(
                          fontFamily: 'Itim-Regular',
                          fontSize: 18,
                        ),
                        decoration: InputDecoration(
                          hintText: 'Confirm Password',
                          filled: true,
                          fillColor: Colors.grey[100],
                          prefixIcon: const Icon(Icons.lock),
                          suffixIcon: IconButton(
                            onPressed: () {
                              setState(() {
                                conPasswordEye = !conPasswordEye;
                              });
                            },
                            icon: Icon(
                              conPasswordEye
                                  ? Icons.visibility_off
                                  : Icons.visibility,
                              color: Colors.black54,
                            ),
                          ),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: const BorderSide(
                              color: Colors.black,
                            ),
                          ),
                          enabledBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: const BorderSide(
                              color: Colors.grey,
                            ),
                          ),
                          focusedBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: const BorderSide(
                              color: Colors.yellow,
                              width: 2.5,
                            ),
                          ),
                        ),
                        validator: (value) {
                          if (value!.isEmpty) {
                            return 'Please retype password';
                          }
                          if (value != passwordController.text) {
                            return 'Not Match';
                          }
                          return null;
                        },
                      ),
                    ),
                    SizedBox(height: screenHeight * 0.02),

                    /// terms and policy
                    Padding(
                      padding: EdgeInsets.only(
                          right: screenWidth * 0.05, left: screenWidth * 0.05),
                      child: const TermsAndPolicy(),
                    ),

                    ///
                    SizedBox(height: screenHeight * 0.02),

                    ///
                    Padding(
                      padding: EdgeInsets.only(
                          right: screenWidth * 0.05, left: screenWidth * 0.05),
                      child: ElevatedButton(
                        onPressed: () {
                          if (_formKey.currentState!.validate()) {
                            ScaffoldMessenger.of(context).showSnackBar(
                              const SnackBar(
                                content: Text(
                                  'Processing Data',
                                ),
                              ),
                            );
                            contex = context;
                            final un = usernameController.text;
                            final pw = passwordController.text;
                            final em = emailController.text;

                            allControl.createUser(
                              user: un,
                              password: pw,
                              email: em,
                            );
                          }
                        },
                        style: ElevatedButton.styleFrom(
                          fixedSize: Size(screenWidth, 50),
                          textStyle: const TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 20,
                          ),
                          backgroundColor:
                              const Color.fromARGB(255, 250, 252, 134),
                          foregroundColor:
                              const Color.fromARGB(255, 54, 47, 47),
                          shape: const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                              Radius.circular(15),
                            ),
                          ),
                        ),
                        child: const Text('Sign Up'),
                      ),
                    ),

                    ///
                    SizedBox(height: screenHeight * 0.02),

                    ///
                    RichText(
                      text: TextSpan(
                        text: 'Already have an account? ',
                        style: const TextStyle(
                            color: Color.fromARGB(255, 255, 237, 78),
                            fontWeight: FontWeight.w500,
                            fontSize: 20,
                            fontFamily: 'Itim-Regular'),
                        children: [
                          TextSpan(
                            text: 'Sign In',
                            style: const TextStyle(
                                color: Color.fromARGB(255, 255, 237, 78),
                                fontWeight: FontWeight.w900,
                                fontSize: 20,
                                fontFamily: 'Itim-Regular'),
                            recognizer: TapGestureRecognizer()
                              ..onTap = () {
                                Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                    builder: (context) => const SignIn(),
                                  ),
                                );
                              },
                          )
                        ],
                      ),
                    ),

                    SizedBox(height: screenHeight * 0.04),

                    ///
                    const Text(
                      '© Team Wreck-On',
                      style: TextStyle(
                        color: Colors.white54,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    SizedBox(
                      height: screenHeight * 0.05,
                    )
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}
