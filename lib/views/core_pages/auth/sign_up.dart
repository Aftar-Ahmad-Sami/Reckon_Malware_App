import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:reckonmalware/views/terms_and_policy/terms_and_policy.dart';

import '../../../constants/constants.dart';
import 'sign_in.dart';

class SignUp extends StatefulWidget {
  const SignUp({super.key});

  @override
  State<SignUp> createState() => _SignUpState();
}

class _SignUpState extends State<SignUp> {
  final _formKey = GlobalKey<FormState>();

  TextEditingController usernameController = TextEditingController();
  TextEditingController emailController = TextEditingController();
  TextEditingController passwordController = TextEditingController();
  TextEditingController conPasswordController = TextEditingController();

  /// focus Node
  final FocusNode userNameFocus = FocusNode();
  final FocusNode emailFocus = FocusNode();
  final FocusNode passFocus = FocusNode();
  final FocusNode conPassFocus = FocusNode();
  final FocusNode nullFocus = FocusNode();

  //
  bool passwordEye = true;
  bool conPasswordEye = true;

  @override
  Widget build(BuildContext context) {
    double screenWidth = MediaQuery.of(context).size.width;
    double screenHeight = MediaQuery.of(context).size.height;
    return Listener(
      onPointerDown: (PointerDownEvent event) =>
          FocusManager.instance.primaryFocus?.unfocus(),
      child: Scaffold(
        body: Container(
          height: screenHeight,
          width: screenWidth,
          decoration: BoxDecoration(
            // gradient: LinearGradient(
            //   colors: [
            //     Color.fromARGB(255, 93, 228, 238),
            //     Color.fromARGB(255, 91, 154, 236),
            //   ],
            //   begin: Alignment.topLeft,
            //   end: Alignment.bottomRight,
            // ),
            color: Color.fromARGB(255, 123, 149, 185),

            image: DecorationImage(
              image: AssetImage(
                "assets/images/signup_bg.jpg",
              ),
              colorFilter: new ColorFilter.mode(
                Colors.black.withOpacity(0.8),
                BlendMode.dstATop,
              ),
              fit: BoxFit.cover,
            ),
          ),
          child: Center(
            child: SingleChildScrollView(
              physics: const BouncingScrollPhysics(
                  parent: AlwaysScrollableScrollPhysics()),
              child: Form(
                key: _formKey,
                child: Padding(
                  padding: EdgeInsets.only(
                    right: screenWidth * 0.05,
                    left: screenWidth * 0.05,
                  ),
                  child: Column(
                    children: [
                      ///
                      SizedBox(height: screenHeight * 0.05),

                      ///
                      Text(
                        'Create\nAccount',
                        style: TextStyle(
                          /// Shadow
                          shadows: [
                            BoxShadow(
                              color: Color.fromRGBO(0, 0, 0, 0.4),
                              offset: const Offset(
                                0.0,
                                6.0,
                              ),
                              blurRadius: 5,
                              spreadRadius: 0.7,
                            ), //BoxShadow
                            BoxShadow(
                              color: Colors.white,
                              offset: const Offset(0.0, 0.0),
                              blurRadius: 0.0,
                              spreadRadius: 0.0,
                            ), //BoxShadow
                          ],

                          /// Font Style
                          //color: Color.fromARGB(255, 255, 221, 71),
                          color: Colors.white,
                          fontFamily: 'KaushanScript',
                          fontSize: 50,
                          fontStyle: FontStyle.italic,
                          fontWeight: FontWeight.bold,
                        ),
                        textAlign: TextAlign.center,
                      ),

                      ///
                      SizedBox(height: screenHeight * 0.05),

                      TextFormField(
                        controller: usernameController,
                        keyboardType: TextInputType.text,
                        textInputAction: TextInputAction.next,
                        style: const TextStyle(
                          fontFamily: 'Itim-Regular',
                          fontSize: 18,
                        ),
                        decoration: InputDecoration(
                          hintText: 'User Name',
                          filled: true,
                          fillColor: Colors.grey[100],
                          prefixIcon: Icon(Icons.person),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: const BorderSide(
                              color: Colors.black,
                            ),
                          ),
                          enabledBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: BorderSide(
                              color: Colors.grey,
                            ),
                          ),
                          focusedBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: const BorderSide(
                              color: Colors.yellow,
                              width: 2.5,
                            ),
                          ),
                        ),
                        validator: (value) {
                          if (value!.isEmpty) {
                            return 'user Name cannot empty';
                          }
                          return null;
                        },
                        focusNode: userNameFocus,
                        onEditingComplete: () =>
                            FocusScope.of(context).requestFocus(emailFocus),
                      ),
                      SizedBox(height: screenHeight * 0.025),

                      /// Email field
                      TextFormField(
                        controller: emailController,
                        focusNode: emailFocus,
                        onEditingComplete: () =>
                            FocusScope.of(context).requestFocus(passFocus),
                        keyboardType: TextInputType.emailAddress,
                        textInputAction: TextInputAction.next,
                        style: const TextStyle(
                          fontFamily: 'Itim-Regular',
                          fontSize: 18,
                        ),
                        decoration: InputDecoration(
                          hintText: 'Email',
                          filled: true,
                          fillColor: Colors.grey[100],
                          prefixIcon: Icon(Icons.email),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: const BorderSide(
                              color: Colors.black,
                            ),
                          ),
                          enabledBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: BorderSide(
                              color: Colors.grey,
                            ),
                          ),
                          focusedBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: const BorderSide(
                              color: Colors.yellow,
                              width: 2.5,
                            ),
                          ),
                        ),

                        /// email validator
                        validator: (value) {
                          RegExp regex =
                              RegExp(r"^[a-z0-9+_.-]+@[a-z.-]+.[a-z]");

                          /**
                              This email field can take ----------
                              -> only small letter,special character(such as '_' and '.') and numerical value before @ sign
                              -> lower case and special character (such as '.') between "@" and "." sign
                              -> only lower case letter after "."
                              -> For example : "example@gmail.com"
                           **/

                          if (value!.isEmpty) {
                            return 'Please Enter an email address';
                          }
                          if (!regex.hasMatch(value)) {
                            return 'Please a valid Email';
                          }
                          return null;
                        },
                      ),
                      SizedBox(height: screenHeight * 0.025),

                      /// Password field
                      TextFormField(
                        controller: passwordController,
                        focusNode: passFocus,
                        onEditingComplete: () =>
                            FocusScope.of(context).requestFocus(conPassFocus),
                        keyboardType: TextInputType.text,
                        textInputAction: TextInputAction.next,
                        obscureText: !passwordEye,
                        style: const TextStyle(
                          fontFamily: 'Itim-Regular',
                          fontSize: 18,
                        ),
                        decoration: InputDecoration(
                          hintText: 'Password',
                          filled: true,
                          fillColor: Colors.grey[100],
                          prefixIcon: Icon(Icons.lock),
                          suffixIcon: IconButton(
                            onPressed: () {
                              setState(() {
                                passwordEye = !passwordEye;
                              });
                            },
                            icon: passwordEye
                                ? Icon(
                                    Icons.visibility,
                                    color: Colors.black,
                                  )
                                : Icon(
                                    Icons.visibility_off,
                                    color: Colors.grey,
                                  ),
                          ),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: const BorderSide(
                              color: Colors.black,
                            ),
                          ),
                          enabledBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: BorderSide(
                              color: Colors.grey,
                            ),
                          ),
                          focusedBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: const BorderSide(
                              color: Colors.yellow,
                              width: 2.5,
                            ),
                          ),
                        ),
                        validator: (value) {
                          RegExp regex = RegExp(
                              r'^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[!@#\$&*~]).{8,}$');
                          /**
                              This password field need the following characteristics to validate
                              -> Must contain uppercase letter
                              -> Must contain lowercase letter
                              -> Must contain special character
                              -> Must contain numerical character
                              -> Must contain 8 values in minimum
                              -> No limit in the highest number of characters to validate
                           **/
                          if (value!.isEmpty) {
                            return 'Please Enter password';
                          }
                          if (!regex.hasMatch(value)) {
                            return 'Password must contain at least eight characters including digit,\nuppercase-lowercase letter and special characters(!@#\$&*~)';
                          }
                          return null;
                        },
                      ),
                      SizedBox(height: screenHeight * 0.025),
                      TextFormField(
                        controller: conPasswordController,
                        focusNode: conPassFocus,
                        keyboardType: TextInputType.text,
                        textInputAction: TextInputAction.done,
                        obscureText: !conPasswordEye,
                        style: const TextStyle(
                          fontFamily: 'Itim-Regular',
                          fontSize: 18,
                        ),
                        decoration: InputDecoration(
                          hintText: 'Confirm Password',
                          filled: true,
                          fillColor: Colors.grey[100],
                          prefixIcon: Icon(Icons.lock),
                          suffixIcon: IconButton(
                            onPressed: () {
                              setState(() {
                                conPasswordEye = !conPasswordEye;
                              });
                            },
                            icon: conPasswordEye
                                ? Icon(
                                    Icons.visibility,
                                    color: Colors.black,
                                  )
                                : Icon(
                                    Icons.visibility_off,
                                    color: Colors.grey,
                                  ),
                          ),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: const BorderSide(
                              color: Colors.black,
                            ),
                          ),
                          enabledBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: BorderSide(
                              color: Colors.grey,
                            ),
                          ),
                          focusedBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(30),
                            borderSide: const BorderSide(
                              color: Colors.yellow,
                              width: 2.5,
                            ),
                          ),
                        ),
                        validator: (value) {
                          if (value!.isEmpty) {
                            return 'Please retype password';
                          }
                          if (value != passwordController.text) {
                            return 'Not Match';
                          }
                          return null;
                        },
                      ),
                      SizedBox(height: screenHeight * 0.02),

                      /// terms and policy
                      TermsAndPolicy(),

                      ///
                      SizedBox(height: screenHeight * 0.02),

                      ///
                      ElevatedButton(
                        onPressed: () {
                          if (_formKey.currentState!.validate()) {
                            ScaffoldMessenger.of(context).showSnackBar(
                              const SnackBar(
                                content: Text(
                                  'Processing Data',
                                ),
                              ),
                            );
                            contex = context;
                            final un = usernameController.text;
                            final pw = passwordController.text;
                            final em = emailController.text;

                            allControl.createUser(
                              user: un,
                              password: pw,
                              email: em,
                            );
                          }
                        },
                        style: ElevatedButton.styleFrom(
                          fixedSize: Size(screenWidth, 50),
                          textStyle: const TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 20,
                          ),
                          backgroundColor:
                              const Color.fromARGB(255, 250, 252, 134),
                          foregroundColor:
                              const Color.fromARGB(255, 54, 47, 47),
                          shape: const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                              Radius.circular(15),
                            ),
                          ),
                        ),
                        child: const Text('Sign Up'),
                      ),

                      // ElevatedButton(
                      //   style: ElevatedButton.styleFrom(
                      //     fixedSize: Size(screenWidth, screenHeight * 0.065),
                      //     backgroundColor: Color.fromARGB(205, 47, 168, 233),
                      //     shape: RoundedRectangleBorder(
                      //       borderRadius: BorderRadius.circular(50),
                      //     ),
                      //   ),
                      //   child: Text(
                      //     "Sign Up",
                      //     textAlign: TextAlign.left,
                      //     style: TextStyle(
                      //       color: Color.fromARGB(255, 255, 237, 78),
                      //       fontWeight: FontWeight.w900,
                      //       fontSize: 20,
                      //       fontFamily: 'Itim-Regular',
                      //     ),
                      //     // style: TextStyle(
                      //     //   color: Colors.white,
                      //     //   fontSize: 30,
                      //     //   fontStyle: FontStyle.italic,
                      //     //   fontWeight: FontWeight.bold,
                      //     // ),
                      //   ),
                      //   onPressed: () {
                      //     if (_formKey.currentState!.validate()) {
                      //       ScaffoldMessenger.of(context).showSnackBar(
                      //         const SnackBar(
                      //           content: Text(
                      //             'Processing Data',
                      //           ),
                      //         ),
                      //       );
                      //       contex = context;
                      //       final un = usernameController.text;
                      //       final pw = passwordController.text;
                      //       final em = emailController.text;

                      //       allControl.createUser(
                      //         user: un,
                      //         password: pw,
                      //         email: em,
                      //       );
                      //     }
                      //   },
                      // ),

                      ///
                      SizedBox(height: screenHeight * 0.02),

                      ///
                      RichText(
                        text: TextSpan(
                          text: 'Already have an account? ',
                          style: const TextStyle(
                              color: Color.fromARGB(255, 255, 237, 78),
                              fontWeight: FontWeight.w500,
                              fontSize: 20,
                              fontFamily: 'Itim-Regular'),
                          children: [
                            TextSpan(
                              text: 'Sign In',
                              style: const TextStyle(
                                  color: Color.fromARGB(255, 255, 237, 78),
                                  fontWeight: FontWeight.w900,
                                  fontSize: 20,
                                  fontFamily: 'Itim-Regular'),
                              recognizer: TapGestureRecognizer()
                                ..onTap = () {
                                  Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder: (context) => const SignIn(),
                                    ),
                                  );
                                },
                            )
                          ],
                        ),
                      ),

                      SizedBox(height: screenHeight * 0.04),

                      ///
                      Text(
                        '© Team Wreck-On',
                        style: TextStyle(
                          color: Colors.black,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}
