import 'dart:convert';
import 'dart:core';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

import 'package:http/http.dart' as http;
import 'package:reckonmalware/constants/constants.dart';
import 'package:reckonmalware/views/core_pages/result_pages/result_statistics.dart';

import '../../../components/loading_pages/search_loading_page.dart';
import '../../../components/result_icon.dart';
import '../../../methods/json_data_process.dart';
import '../../error_pages/error_404.dart';

var fullurl = "";

class ResultPage extends StatefulWidget {
  final String url;
  final String mode;

  const ResultPage({Key? key, required this.url, required this.mode})
      : super(key: key);

  @override
  // ignore: no_logic_in_create_state
  State<ResultPage> createState() => _ResultPageState(url, mode);
}

class _ResultPageState extends State<ResultPage> {
  var data = [], data1 = [], data2 = [], data3 = [];
  bool isLoading = true;
  int num = 0;

  int cleaned = 0, uncleaned = 0, unknown = 0;

  _ResultPageState(String url, String mode);

  @override
  void initState() {
    // if (widget.mode == "scan_url") {
    //   _getJsonDataOfURL(widget.url);
    // } else {
    _getJsonData(widget.url);
    // }
    super.initState();
  }

  delayTime({required int timeInSeconds}) async {
    return await Future.delayed(Duration(seconds: timeInSeconds), () {
      _getJsonData(widget.url);
    });
  }

  var client = http.Client();
  Future<dynamic> _getJsonData(String urll) async {
    Uri uri = Uri.parse(urll);
    try {
      var response = await client.get(
        uri,
        headers: {
          "accept": "application/json",
          "content-type": 'application/json',
          "x-apikey":
              //   "7586c4abefe3e3cf9c2d4ffffd39e383ce28ed23a2c0004d269e01e007cdd8c3",
              "bfabedb18bb569bf28fd815165172e861a30c3e816f586622751796730010bc8",
        },
      );
      if (response.statusCode == 200) {
        var conversion = jsonDecode(response.body);
        DataProcess dp = DataProcess(conversion, widget.mode);
        data = dp.list;
        if (data[0].isEmpty) {
          await delayTime(timeInSeconds: 20);

          // Sleeping the main method
          // sleep(const Duration(seconds: 20));
          // _getJsonData(urll);
        } else {
          data1 = data[0];
          data2 = data[1];
          data3 = data[2];

          for (int i = 0; i < data2.length; i++) {
            if (data2[i] == "undetected" || data2[i] == "harmless") {
              cleaned++;
            } else if (data2[i] == "malicious") {
              uncleaned++;
            } else {
              unknown++;
            }
          }

          cleanedCount = cleaned;
          maliciousCount = uncleaned;
          unknownCount = unknown;

          totalCount = cleaned + uncleaned + unknown;

          isLoading = false;
          setState(() {});
        }
      } else {
        Get.back();
        Get.to(const Error404());
      }
    } on Exception {
      Get.back();
      Get.to(const Error404());
    }
  }

  // Future<dynamic> _getJsonDataOfURL(String resourceee) async {
  //   var response;
  //   var formdata = di.FormData.fromMap({
  //     "apikey":
  //         "bfabedb18bb569bf28fd815165172e861a30c3e816f586622751796730010bc8",
  //     "resource": resourceee,
  //   });
  //   response = await di.Dio().get(
  //     'https://www.virustotal.com/vtapi/v2/url/report',
  //     data: formdata,
  //     options: di.Options(headers: {
  //       "accept": "application/json",
  //       "Content-Type": "application/x-www-form-urlencoded",
  //     }),
  //   );
  //   if (response.statusCode == 200) {
  //     var conversion = jsonDecode(response.data);
  //     DataProcess dp = DataProcess(conversion, widget.mode);
  //     data = dp.list;
  //     if (data[0].isEmpty) {
  //       xx = "Empty $num";
  //       setState(() {});
  //       num++;

  //       await delayTime(timeInSeconds: 20);

  //       // Sleeping the main method
  //       // sleep(const Duration(seconds: 20));
  //       // _getJsonData(urll);

  //     } else {
  //       data1 = data[0];
  //       data2 = data[1];
  //       xx = "Success";
  //       isLoading = false;
  //       setState(() {});
  //     }
  //   } else {
  //     xx = response.data;
  //   }
  // }

  @override
  Widget build(BuildContext context) {
    var screenWidth = MediaQuery.of(context).size.width;
    var screenHeight = MediaQuery.of(context).size.height;

    return isLoading
        ? const SearchLoadingPage()
        : Scaffold(
            backgroundColor: const Color.fromARGB(255, 180, 221, 255),
            body: CustomScrollView(
              slivers: [
                SliverAppBar(
                  backgroundColor: Colors.transparent,
                  leading: IconButton(
                    icon: const Icon(Icons.arrow_back),
                    onPressed: () {
                      Get.back();
                    },
                  ),
                  actions: [
                    ElevatedButton(
                        style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.transparent, elevation: 0),
                        onPressed: () {
                          Get.to(ResultStatistics());
                        },
                        child: Text(
                          "STATISTICS",
                          style: TextStyle(fontWeight: FontWeight.bold),
                        ))
                  ],
                  expandedHeight: screenHeight > screenWidth ? 200 : 170,
                  floating: true,
                  flexibleSpace: FlexibleSpaceBar(
                    title: const Text('Result', textScaleFactor: 1),
                    background: Stack(
                      children: [
                        SizedBox(
                          width: double.infinity,
                          child: Image.asset('assets/images/waterfall_bg.jpg',
                              fit: BoxFit.cover),
                        ),
                      ],
                    ),
                  ),
                ),
                const SliverToBoxAdapter(
                  child: SizedBox(
                    height: 20,
                  ),
                ),
                SliverList(
                  delegate: SliverChildBuilderDelegate(
                    (context, index) {
                      return Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: <Widget>[
                          Card(
                              margin: const EdgeInsets.only(top: 8, bottom: 8),
                              child: Container(
                                // color: Colors.yellow,
                                width: screenHeight > screenWidth
                                    ? screenWidth * 0.7
                                    : screenWidth * 0.7,
                                height: screenHeight > screenWidth
                                    ? screenHeight * 0.1
                                    : screenHeight * 0.2,
                                margin: const EdgeInsets.only(
                                    left: 20, right: 20, top: 15, bottom: 15),
                                padding: const EdgeInsets.all(5),
                                decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(30)),
                                child: Row(
                                  mainAxisAlignment:
                                      MainAxisAlignment.spaceBetween,
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Column(
                                      mainAxisAlignment:
                                          MainAxisAlignment.spaceEvenly,
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: [
                                        Text(
                                          data1[index],
                                          style: const TextStyle(
                                            fontSize: 14,
                                            fontWeight: FontWeight.bold,
                                          ),
                                        ),
                                        Text(data2[index] == "malicious"
                                            ? data3[index]
                                            : data2[index]),
                                      ],
                                    ),
                                    Container(
                                      margin: EdgeInsets.only(
                                          top: screenHeight * 0.03),
                                      //  color: Colors.red,
                                      child: data2[index] == "undetected" ||
                                              data2[index] == "harmless"
                                          ? getResultIcon(1)
                                          : data2[index] == "malicious"
                                              ? getResultIcon(2)
                                              : getResultIcon(3),
                                    ),
                                  ],
                                ),
                              )),
                        ],
                      );
                    },
                    childCount: data1.length,
                  ),
                ),
                const SliverToBoxAdapter(
                  child: SizedBox(
                    height: 20,
                  ),
                ),
              ],
            ));
  }
}

/**
 * ListView.builder(
              itemCount: data1.length,
              itemBuilder: (BuildContext context, int index) {
                return Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    Card(
                        margin: EdgeInsets.only(top: 8, bottom: 8),
                        child: Container(
                          // color: Colors.yellow,
                          width: screenWidth * 0.7,
                          height: screenHeight * 0.1,
                          margin: const EdgeInsets.only(
                              left: 20, right: 20, top: 15, bottom: 15),
                          padding: EdgeInsets.all(5),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Column(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceEvenly,
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    data1[index],
                                    style: TextStyle(
                                      fontSize: 14,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                  Text(data2[index] == "malicious"
                                      ? data3[index]
                                      : data2[index]),
                                ],
                              ),
                              Container(
                                margin:
                                    EdgeInsets.only(top: screenHeight * 0.03),
                                //  color: Colors.red,
                                child: data2[index] == "undetected" ||
                                        data2[index] == "harmless"
                                    ? getResultIcon(1)
                                    : data2[index] == "malicious"
                                        ? getResultIcon(2)
                                        : getResultIcon(3),
                              ),
                            ],
                          ),
                        )),
                  ],
                );
              },
            ),
 */