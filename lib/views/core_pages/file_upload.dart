import 'dart:io';

import 'package:crypto/crypto.dart';
import 'package:file_picker/file_picker.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart' as gt;
import 'package:open_file/open_file.dart';

import 'package:dio/dio.dart';

import '../../components/snackbar.dart';
import '../../components/uniform_app_bar.dart';
import '../../components/uniform_drawer.dart';
import '../error_pages/error_404.dart';
import 'result_pages/result_page.dart';

class FileUpload extends StatefulWidget {
  const FileUpload({Key? key}) : super(key: key);

  @override
  State<FileUpload> createState() => _FileUploadState();
}

class _FileUploadState extends State<FileUpload> {
  String fileName = "";
  String? filePath = "";
  late PlatformFile fileForUpload;
  late String fileReportUrl;
  bool isReadyForUpload = false;

  @override
  Widget build(BuildContext context) {
    double screenHeight = MediaQuery.of(context).size.height;
    double screenWidth = MediaQuery.of(context).size.width;
    return Listener(
      onPointerDown: (PointerDownEvent event) =>
          FocusManager.instance.primaryFocus?.unfocus(),
      child: Scaffold(
        backgroundColor: Color.fromARGB(255, 65, 119, 211),
        drawer: const UniformDrawer(),
        appBar: UniformAppBar(titleName: "Upload File"),
        body: Padding(
          padding:
              const EdgeInsets.only(left: 20, right: 20, bottom: 0, top: 120),
          child: Container(
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(25),
              color: Color.fromARGB(255, 250, 244, 244),
            ),
            height: screenHeight * .550,
            child: Container(
                alignment: Alignment.center,
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    SizedBox(
                      height: 10,
                    ),
                    Text(
                      'UPLOAD FILES',
                      style:
                          TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                    ),
                    SizedBox(
                      height: screenHeight * 0.010,
                    ),
                    Text(
                      'Upload Documents you want to scan.',
                      style: TextStyle(
                          fontSize: 17, fontWeight: FontWeight.normal),
                    ),
                    SizedBox(
                      height: screenHeight * 0.040,
                    ),
                    selectedFileBox(screenWidth, screenHeight),
                    const SizedBox(
                      height: 5,
                    ),
                    selectAndScanButtons(screenWidth, screenHeight),
                  ],
                )),
          ),
        ),
      ),
    );
  }

  Widget selectedFileBox(double wwidth, double hheight) {
    return Container(
        width: wwidth * 0.8,
        height: hheight * 0.32,
        padding: const EdgeInsets.only(left: 25, right: 10),
        decoration: BoxDecoration(
          color: Color.fromARGB(75, 151, 202, 214),
          borderRadius: BorderRadius.circular(25),
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Text(
              'Drop Your File Here',
              style: TextStyle(fontSize: 15, color: Colors.black),
            ),
            SizedBox(
              height: 20,
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                GestureDetector(
                  onTap: () async {
                    if (filePath == "") return;
                    String filepath = filePath.toString();
                    await OpenFile.open(filepath);
                    setState(() {});
                  },
                  child: Container(
                    width: 160,
                    height: 50,
                    color: Colors.transparent,
                    alignment: Alignment.center,
                    child: Text(
                      fileName,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                ),
                IconButton(
                  icon: const Icon(Icons.cancel_rounded),
                  color: Colors.black,
                  iconSize: 35,
                  onPressed: () {
                    fileName = "";
                    filePath = "";
                    isReadyForUpload = false;
                    setState(() {});
                  },
                ),
              ],
            ),
            SizedBox(
              height: 50,
            ),
            ElevatedButton(
              child: const Text("Browse File"),
              onPressed: () async {
                final select = await FilePicker.platform.pickFiles();
                if (select == null) return;

                final file = select.files.first;

                fileForUpload = file;
                isReadyForUpload = true;

                fileName = file.name;
                filePath = file.path;
                setState(() {});
              },
            ),
          ],
        ));
  }

  Widget selectAndScanButtons(double wwidth, double hheight) {
    return Container(
      width: wwidth * 0.7,
      padding: const EdgeInsets.only(left: 15),
      child: ElevatedButton.icon(
        icon: Icon(Icons.search),
        label: const Text("Scan"),
        onPressed: () async {
          if (isReadyForUpload) {
            uploadFile(fileForUpload);
          } else {
            ScaffoldMessenger.of(context).showSnackBar(warningSnackBar());
          }
        },
      ),
    );
  }

  Future<String> hashingFile(String path) async {
    File file = File(path);
    late String out;
    try {
      final stream = file.openRead();
      final hash = await md5.bind(stream).first;
      out = hash.toString();
    } catch (e) {
      return "Hashing Problem: ${e.toString()}";
    }
    return 'https://www.virustotal.com/api/v3/files/$out';
  }

  void uploadFile(fileForUpload) async {
    try {
      FormData formdata = FormData.fromMap({
        "file":
            await MultipartFile.fromFile(fileForUpload.path, filename: fileName)
      });
      var response = await Dio().post(
        "https://www.virustotal.com/api/v3/files",
        data: formdata,
        options: Options(headers: {
          "accept": "application/json",
          "x-apikey":
              "dc6c0e17ae2679cf71ef9a6a2ffe2e00f12125abc7d1675b7e46c8fc3d96b136",
        }),
      );

      if (response.statusCode == 200) {
        fileReportUrl = await hashingFile(fileForUpload.path);
        gt.Get.to(ResultPage(url: fileReportUrl, mode: "report"));
      } else {
        gt.Get.to(const Error404());
      }
    } catch (e) {
      gt.Get.to(const Error404());
    }
  }
}
