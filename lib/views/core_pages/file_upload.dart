import 'dart:io';

import 'package:crypto/crypto.dart';
import 'package:file_picker/file_picker.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart' as gt;
import 'package:open_file/open_file.dart';

import 'package:dio/dio.dart';

import '../../components/snackbar.dart';
import '../../components/uniform_app_bar.dart';
import '../../components/uniform_drawer.dart';
import '../error_pages/error_404.dart';
import 'result_pages/result_page.dart';

class FileUpload extends StatefulWidget {
  const FileUpload({Key? key}) : super(key: key);

  @override
  State<FileUpload> createState() => _FileUploadState();
}

class _FileUploadState extends State<FileUpload> {
  String fileName = "";
  String? filePath = "";
  late PlatformFile fileForUpload;
  late String fileReportUrl;
  bool isReadyForUpload = false;

  @override
  Widget build(BuildContext context) {
    double screenHeight = MediaQuery.of(context).size.height;
    double screenWidth = MediaQuery.of(context).size.width;
    return Listener(
      onPointerDown: (PointerDownEvent event) =>
          FocusManager.instance.primaryFocus?.unfocus(),
      child: Scaffold(
        backgroundColor: const Color(0xffff948d),
        drawer: const UniformDrawer(),
        appBar: UniformAppBar(titleName: "Upload File"),
        body: Container(
          alignment: Alignment.center,
          child: screenHeight > screenWidth
              ? Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    selectedFileBox(screenWidth, screenHeight),
                    const SizedBox(
                      height: 20,
                    ),
                    selectAndScanButtons(screenWidth, screenHeight),
                  ],
                )
              : Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        selectedFileBox(screenWidth, screenHeight),
                        const SizedBox(
                          width: 40,
                        ),
                        selectAndScanButtons(screenWidth, screenHeight),
                      ],
                    ),
                    SizedBox(
                      height: screenHeight * 0.2,
                    )
                  ],
                ),
        ),
      ),
    );
  }

  Widget selectedFileBox(double wwidth, double hheight) {
    return Container(
        width: hheight > wwidth ? wwidth * 0.8 : wwidth * 0.5,
        height: hheight > wwidth ? 125 : 100,
        padding:
            const EdgeInsets.only(top: 25, bottom: 25, left: 25, right: 10),
        decoration: BoxDecoration(
          color: const Color.fromRGBO(255, 255, 255, 0.3),
          borderRadius: BorderRadius.circular(25),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          //     crossAxisAlignment: CrossAxisAlignment.end,
          children: [
            GestureDetector(
              onTap: () async {
                if (filePath == "") return;
                String filepath = filePath.toString();
                await OpenFile.open(filepath);
                setState(() {});
              },
              child: Container(
                width: 160,
                height: 50,
                color: Colors.transparent,
                alignment: Alignment.center,
                child: Text(
                  fileName,
                  overflow: TextOverflow.ellipsis,
                ),
              ),
            ),
            IconButton(
              icon: const Icon(Icons.cancel_rounded),
              color: Colors.white,
              // alignment: Alignment.bottomLeft,
              iconSize: 35,
              onPressed: () {
                fileName = "";
                filePath = "";
                isReadyForUpload = false;
                setState(() {});
              },
            )
          ],
        ));
  }

  Widget selectAndScanButtons(double wwidth, double hheight) {
    return SizedBox(
      //  color: Colors.red,
      height: 150,
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          ElevatedButton(
            child: const Text("Select File"),
            onPressed: () async {
              final select = await FilePicker.platform.pickFiles();
              if (select == null) return;

              final file = select.files.first;

              fileForUpload = file;
              isReadyForUpload = true;

              fileName = file.name;
              filePath = file.path;
              setState(() {});
            },
          ),
          const SizedBox(height: 50),
          ElevatedButton(
            child: const Text("Scan"),
            onPressed: () async {
              if (isReadyForUpload) {
                //fileHash = await hashingFile(fileForUpload);
                uploadFile(fileForUpload);
              } else {
                ScaffoldMessenger.of(context).showSnackBar(warningSnackBar());
              }
              //  Get.to(HomePage(url: _url)) : setState(() {});
            },
          ),
        ],
      ),
    );
  }

  Future<String> hashingFile(String path) async {
    File file = File(path);
    late String out;
    // if (!file.existsSync()) {
    //   //var warning = WarningSnackBar();
    //   ScaffoldMessenger.of(context).showSnackBar(warningSnackBar());
    //   //setState(() {});
    //   return "";
    // }

    try {
      final stream = file.openRead();
      final hash = await md5.bind(stream).first;
      out = hash.toString();
    } catch (e) {
      return "Hashing Problem: ${e.toString()}";
    }
    // out = "8638c096d8fbe36d0269979c40de1607";
    return 'https://www.virustotal.com/api/v3/files/$out';
  }

  void uploadFile(fileForUpload) async {
    try {
      FormData formdata = FormData.fromMap({
        "file":
            await MultipartFile.fromFile(fileForUpload.path, filename: fileName)
      });
      var response = await Dio().post(
        "https://www.virustotal.com/api/v3/files",
        data: formdata,
        options: Options(headers: {
          "accept": "application/json",
          "x-apikey":
              "dc6c0e17ae2679cf71ef9a6a2ffe2e00f12125abc7d1675b7e46c8fc3d96b136",
        }),
      );

      if (response.statusCode == 200) {
        // var x = IdAnalysis.fromJson(response.data);
        // var y = x.data.id;
        // var response2 = await Dio().get(
        //   "https://www.virustotal.com/api/v3/analyses/${y}",
        //   options: Options(headers: {
        //     "accept": "application/json",
        //     "x-apikey":
        //         "7586c4abefe3e3cf9c2d4ffffd39e383ce28ed23a2c0004d269e01e007cdd8c3",
        //   }),
        // );

        // ---------------->>>>>>>

        //  "id": YTNhZDVkYmI0ODM0OGRkNjUwNjRmZDQwNmIyMWM4OTA6MTY2ODg0Nzk5Ng==

        fileReportUrl = await hashingFile(fileForUpload.path);
        gt.Get.to(ResultPage(url: fileReportUrl, mode: "report"));
      }
    } catch (e) {
      gt.Get.to(const Error404());
    }
  }
}
