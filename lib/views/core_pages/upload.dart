// Backup of home

import 'dart:convert';
import 'dart:core';

import 'package:flutter/material.dart';
import 'package:get/get.dart';

import 'package:http/http.dart' as http;

import '../../components/result_icon.dart';
import '../../methods/json_data_process.dart';

var fullurl = "";

class HomePage extends StatefulWidget {
  final String url;
  final String mode;

  const HomePage({Key? key, required this.url, required this.mode})
      : super(key: key);

  @override
  // ignore: no_logic_in_create_state
  State<HomePage> createState() => _HomePageState(url, mode);
}

class _HomePageState extends State<HomePage> {
  var xx = "";

  var output = "";
  var data = [], data1 = [], data2 = [];

  _HomePageState(String url, String mode);

  @override
  void initState() {
    xx = "XSS";
    getJsonData(widget.url);

    //  setState(() {});
    super.initState();
  }

  // hashingFile() async {
  //   var file = File(widget.path);
  //   if (!file.existsSync()) {
  //     xx = "NotFile";
  //     setState(() {});
  //     return;
  //   }

  //   try {
  //     final stream = file.openRead();
  //     final hash = await md5.bind(stream).first;
  //     output = hash.toString();
  //     xx = "HSS";

  //     // output = "8638c096d8fbe36d0269979c40de1607";
  //     //url = url + output.toString();
  //     getJsonData("https://www.virustotal.com/api/v3/files/" + hash.toString());
  //     setState(() {});
  //   } catch (exception) {
  //     xx = "NHSS";
  //     return "";
  //   }

  //   setState(() {});
  // }

  var client = http.Client();
  Future<void> getJsonData(String urll) async {
    //url = url + urll;

    Uri uri = Uri.parse(urll);

    // if (uri.isAbsolute)
    //   xx = uri.path.toString();
    // else
    //   xx = uri.isAbsolute.toString();

    var response = await client.get(
      uri,
      headers: {
        "accept": "application/json",
        "content-type": 'application/json',
        // 'Access-Control_Allow_Origin': '*', // Required for CORS support to work

        "x-apikey":
            "bfabedb18bb569bf28fd815165172e861a30c3e816f586622751796730010bc8",
      },
    );
    // //print(response.body);

    // Sample
    //var res = await rootBundle.loadString('assets/images/demo.json');
    //var x = await json.decode(res);
    if (response.statusCode == 200) {
      var conversion = jsonDecode(response.body);
      // data = jsonEncode(conversion);

      DataProcess dp = DataProcess(conversion, widget.mode);
      data = dp.list;
      data1 = data[0];
      data2 = data[1];
      xx = "Success";
    } else {
      // xx = urll;
      xx = response.body;
    }

    setState(() {
      //Sample
      // DataProcess dp = DataProcess();
      // data = dp.getList(x);
      // data1 = data[0];
      // data2 = data[1];
    });
  }

  @override
  Widget build(BuildContext context) {
    var screenWidth = MediaQuery.of(context).size.width;
    var screenHeight = MediaQuery.of(context).size.height;

    return Scaffold(
      appBar: AppBar(
        title: Text(xx, style: TextStyle(fontSize: 5)),
        actions: [
          ElevatedButton(
            onPressed: () {
              xx = data.toString();

              setState(() {});
            },
            child: Text("SHOW"),
          ),
        ],
      ),
      body: //Text(xx),
          ListView.builder(
        itemCount: data1.length,
        itemBuilder: (BuildContext context, int index) {
          return Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Card(
                  margin: EdgeInsets.only(top: 8, bottom: 8),
                  child: Container(
                    // color: Colors.yellow,
                    width: screenWidth * 0.7,
                    height: screenHeight * 0.1,
                    margin: const EdgeInsets.only(
                        left: 20, right: 20, top: 15, bottom: 15),
                    padding: EdgeInsets.all(5),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Column(
                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              data1[index],
                              style: TextStyle(
                                fontSize: 14,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            Text(data2[index]),
                          ],
                        ),
                        Container(
                          margin: EdgeInsets.only(top: screenHeight * 0.03),
                          //  color: Colors.red,
                          child: data2[index] == "undetected"
                              ? getResultIcon(1)
                              : data2[index] == "malicious"
                                  ? getResultIcon(2)
                                  : getResultIcon(3),
                        ),
                      ],
                    ),
                  )),
            ],
          );
        },
      ),
    );
  }
}
