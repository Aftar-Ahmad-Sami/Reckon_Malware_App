import 'dart:convert';
import 'dart:core';
import 'package:dio/dio.dart';
import 'package:flutter/material.dart';

import '../components/loading_progress_circular.dart';

import '../components/result_icon.dart';
import '../methods/json_data_process.dart';

var fullurl = "";

class UrlResult extends StatefulWidget {
  final String url;
  final String mode;

  const UrlResult({Key? key, required this.url, required this.mode})
      : super(key: key);

  @override
  // ignore: no_logic_in_create_state
  State<UrlResult> createState() => _UrlResultState(url, mode);
}

class _UrlResultState extends State<UrlResult> {
  var xx = "";
  var output = "";
  var data = [], data1 = [], data2 = [];
  bool isLoading = true;
  int num = 0;

  _UrlResultState(String url, String mode);

  @override
  void initState() {
    xx = "XSS";
    _getJsonDataOfURL(widget.url);
    super.initState();
  }

  delayTime({required int timeInSeconds}) async {
    return await Future.delayed(Duration(seconds: timeInSeconds), () {
      _getJsonDataOfURL(widget.url);
    });
  }

  Future<dynamic> _getJsonDataOfURL(String resourceee) async {
    var response;
    var formdata = FormData.fromMap({
      "apikey":
          "bfabedb18bb569bf28fd815165172e861a30c3e816f586622751796730010bc8",
      "resource": resourceee,
    });
    response = await Dio().get(
      'https://www.virustotal.com/vtapi/v2/url/report',
      queryParameters: {
        "apikey":
            "bfabedb18bb569bf28fd815165172e861a30c3e816f586622751796730010bc8",
        "resource": resourceee,
      },
      options: Options(headers: {
        "accept": "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      }),
    );
    if (response.statusCode == 200) {
      var conversion = response.data;
      DataProcess dp = DataProcess(conversion, widget.mode);
      data = dp.list;
      if (data[0].isEmpty) {
        xx = "Empty $num";
        setState(() {});
        num++;

        await delayTime(timeInSeconds: 20);

        // Sleeping the main method
        // sleep(const Duration(seconds: 20));
        // _getJsonData(urll);

      } else {
        data1 = data[0];
        data2 = data[1];
        xx = "Success";
        isLoading = false;
        setState(() {});
      }
    } else {
      xx = response.data;
    }
  }

  @override
  Widget build(BuildContext context) {
    var screenWidth = MediaQuery.of(context).size.width;
    var screenHeight = MediaQuery.of(context).size.height;

    return Scaffold(
      appBar: AppBar(
        title: Text(xx, style: TextStyle(fontSize: 5)),
        actions: [
          ElevatedButton(
            onPressed: () {
              xx = data.toString();

              setState(() {});
            },
            child: Text("SHOW"),
          ),
        ],
      ),
      body: isLoading
          ? const LoadingProgressCircular()
          : ListView.builder(
              itemCount: data1.length,
              itemBuilder: (BuildContext context, int index) {
                return Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    Card(
                        margin: EdgeInsets.only(top: 8, bottom: 8),
                        child: Container(
                          // color: Colors.yellow,
                          width: screenWidth * 0.7,
                          height: screenHeight * 0.1,
                          margin: const EdgeInsets.only(
                              left: 20, right: 20, top: 15, bottom: 15),
                          padding: EdgeInsets.all(5),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Column(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceEvenly,
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    data1[index],
                                    style: TextStyle(
                                      fontSize: 14,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                  Text(data2[index]),
                                ],
                              ),
                              Container(
                                margin:
                                    EdgeInsets.only(top: screenHeight * 0.03),
                                //  color: Colors.red,
                                child: data2[index] == "undetected" ||
                                        data2[index] == "clean site"
                                    ? getResultIcon(1)
                                    : data2[index] == "malicious" ||
                                            data2[index] == "malicious site" ||
                                            data2[index] == "phishing site" ||
                                            data2[index] == "suspicious site"
                                        ? getResultIcon(2)
                                        : getResultIcon(3),
                              ),
                            ],
                          ),
                        )),
                  ],
                );
              },
            ),
    );
  }
}
