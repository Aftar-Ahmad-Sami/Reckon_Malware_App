import 'package:flutter/material.dart';
import '../Routes/routes.dart';

class SignUpPage extends StatefulWidget {
  const SignUpPage({Key? key}) : super(key: key);

  @override
  State<SignUpPage> createState() => _SignUpPageState();
}

class _SignUpPageState extends State<SignUpPage> {
  /// bool type value declared for suffix icon of password and confirm password field
  bool _isVisiblePass = false;
  bool _isVisibleConPass = false;

  /// A global key named "_key" is declared to validate the all 'text from fields'
  final _key = GlobalKey<FormState>();

  /// navigate to login screen after sign up
  gotoLogin(BuildContext context) {
    if (_key.currentState!.validate()) {
      Navigator.pushNamed(context, Routes.login);
    }
  }

  /// all fields controller
  final TextEditingController _passController = TextEditingController();
  final TextEditingController _confirmPassController = TextEditingController();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _userNameController = TextEditingController();

  /// for auto focus
  final _nameFocus = FocusNode();
  final _emailFocus = FocusNode();
  final _passwordFocus = FocusNode();
  final _conPassFocus = FocusNode();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('SignUp'),
      ),

      /// body
      body: SingleChildScrollView(
        child: Center(
          /// Whole container where all other widgets have placed
          child: Container(
            height: 800,
            width: 360,
            decoration: BoxDecoration(
              color: Colors.white,
              //border: Border.all(color:Colors.blue, width:2),
              borderRadius: const BorderRadius.all(const Radius.circular(45)),
            ),

            /// Column
            /// here another two container is placed
            /// one container is for image
            /// another one is for all text form fields
            child: Column(
              children: [
                /// image container
                Container(
                  height: 250,
                  width: 360,
                  decoration: BoxDecoration(
                    //color:Colors.blue,
                    shape: BoxShape.rectangle,
                    //border: Border.all(color:Colors.red, width:2),
                    borderRadius:
                        const BorderRadius.all(const Radius.circular(42)),
                    image: DecorationImage(
                        image: AssetImage('assets/images/login.png'),
                        fit: BoxFit.cover),
                  ),
                ),

                /// textformfields container
                Container(
                  height: 550.0,
                  width: 360.0,
                  alignment: Alignment.topCenter,
                  decoration: const BoxDecoration(
                      color: Colors.white,
                      shape: BoxShape.rectangle,
                      //border: Border.all(color:Colors.red, width:2),
                      borderRadius: BorderRadius.all(Radius.circular(40))),

                  /// Stack
                  /// Stack is declared to place all text form fields
                  child: Stack(
                    children: [
                      Padding(
                        padding: const EdgeInsets.all(20.0),

                        /// Form
                        child: Form(
                          key: _key,
                          child: Column(
                            children: [
                              /// 'Sign Up' text is placed in the front of second container
                              Text(
                                'Sign Up',
                                style: TextStyle(
                                    fontSize: 35, fontWeight: FontWeight.w900),
                              ),

                              SizedBox(
                                height: 30,
                              ),

                              //Image.asset('assets/images/login.png',height : 100,),

                              /// User name text fields
                              TextFormField(
                                controller: _userNameController,

                                focusNode: _nameFocus,
                                onEditingComplete: () => FocusScope.of(context)
                                    .requestFocus(_emailFocus),

                                keyboardType: TextInputType.text,
                                textInputAction: TextInputAction.next,

                                /// decorate username field
                                decoration: InputDecoration(
                                  contentPadding: const EdgeInsets.symmetric(
                                    vertical: 10,
                                  ),
                                  prefixIcon: Icon(Icons.person),
                                  suffixIcon: IconButton(
                                    icon: Icon(Icons.clear),
                                    onPressed: () {
                                      _userNameController.clear();
                                    },
                                  ),
                                  enabledBorder: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(50),
                                    borderSide: BorderSide(
                                      color: Colors.grey,
                                    ),
                                  ),
                                  focusedBorder: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(50),
                                    borderSide: BorderSide(
                                      color: Colors.black,
                                    ),
                                  ),
                                  hintText: 'Enter User Name : ',
                                  label: Text('User Name'),
                                ),

                                /// user name validator
                                validator: (value) {
                                  if (value!.isEmpty) {
                                    return 'user Name cannot empty';
                                  }
                                  return null;
                                },
                              ),

                              SizedBox(
                                height: 20,
                              ),

                              /// Email field
                              TextFormField(
                                controller: _emailController,
                                focusNode: _emailFocus,
                                onEditingComplete: () => FocusScope.of(context)
                                    .requestFocus(_passwordFocus),

                                keyboardType: TextInputType.emailAddress,
                                textInputAction: TextInputAction.next,

                                /// decorate email field
                                decoration: InputDecoration(
                                  contentPadding: const EdgeInsets.symmetric(
                                    vertical: 10,
                                  ),
                                  prefixIcon: Icon(Icons.email),
                                  suffixIcon: IconButton(
                                    icon: Icon(Icons.clear),
                                    onPressed: () {
                                      _emailController.clear();
                                    },
                                  ),
                                  enabledBorder: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(50),
                                    borderSide: BorderSide(
                                      color: Colors.grey,
                                    ),
                                  ),
                                  focusedBorder: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(50),
                                    borderSide: BorderSide(
                                      color: Colors.black,
                                    ),
                                  ),
                                  hintText: 'Enter email address : ',
                                  label: Text('Email'),
                                ),

                                /// email validator
                                validator: (value) {
                                  RegExp regex =
                                      RegExp(r"^[a-z0-9+_.-]+@[a-z.-]+.[a-z]");

                                  /**
                                      This email field can take ----------
                                      -> For example : "example@gmail.com"
                                      -> before @ sign only small letter,special character(such as '_' and '.') and numerical value is allowed
                                      -> between "@" and "." sign lower case and special character (such as '.') is allowed
                                      -> after "." only lower case letter is allowed
                                   **/

                                  if (value!.isEmpty) {
                                    return 'Please Enter an email address';
                                  }
                                  if (!regex.hasMatch(value)) {
                                    return 'Please a valid Email';
                                  }
                                  return null;
                                },
                              ),

                              SizedBox(
                                height: 20,
                              ),

                              /// Password field
                              TextFormField(
                                controller: _passController,

                                focusNode: _passwordFocus,
                                onEditingComplete: () => FocusScope.of(context)
                                    .requestFocus(_conPassFocus),

                                keyboardType: TextInputType.text,
                                textInputAction: TextInputAction.next,

                                obscureText: !_isVisiblePass,

                                /// to fix suffix icon

                                decoration: InputDecoration(
                                  contentPadding: const EdgeInsets.symmetric(
                                    vertical: 10,
                                  ),
                                  prefixIcon: Icon(Icons.lock),
                                  suffixIcon: IconButton(
                                    onPressed: () {
                                      setState(() {
                                        _isVisiblePass = !_isVisiblePass;
                                      });
                                    },
                                    icon: _isVisiblePass
                                        ? Icon(
                                            Icons.visibility,
                                            color: Colors.black,
                                          )
                                        : Icon(
                                            Icons.visibility_off,
                                            color: Colors.grey,
                                          ),
                                  ),
                                  enabledBorder: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(50),
                                    borderSide: BorderSide(
                                      color: Colors.grey,
                                    ),
                                  ),
                                  focusedBorder: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(50),
                                    borderSide: BorderSide(
                                      color: Colors.black,
                                    ),
                                  ),
                                  hintText: 'Enter Password : ',
                                  label: Text('Password'),
                                ),

                                /// password validator
                                validator: (value) {
                                  RegExp regex = RegExp(
                                      r'^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[!@#\$&*~]).{8,}$');
                                  /**
                                        This password field need the following characteristics to validate
                                        -> Must contain uppercase letter
                                        -> Must contain lowercase letter
                                        -> Must contain special character
                                        -> Must contain numerical character
                                        -> Must contain 8 values in minimum
                                        -> No limit in the highest number of characters to validate
                                     **/
                                  if (value!.isEmpty) {
                                    return 'Password can not be empty';
                                  }
                                  if (!regex.hasMatch(value)) {
                                    return 'Password must contain six characters including\nspecial characters, uppercase and lowercase letter';
                                  }
                                  return null;
                                },
                              ),

                              SizedBox(
                                height: 20,
                              ),

                              /// Confirm password field
                              TextFormField(
                                  controller: _confirmPassController,
                                  focusNode: _conPassFocus,
                                  keyboardType: TextInputType.text,
                                  textInputAction: TextInputAction.done,
                                  obscureText: !_isVisibleConPass,
                                  decoration: InputDecoration(
                                    contentPadding: const EdgeInsets.symmetric(
                                      vertical: 10,
                                    ),
                                    prefixIcon: Icon(Icons.lock),

                                    /// to fix suffix icon
                                    suffixIcon: IconButton(
                                      onPressed: () {
                                        setState(() {
                                          _isVisibleConPass =
                                              !_isVisibleConPass;
                                        });
                                      },
                                      icon: _isVisibleConPass
                                          ? Icon(
                                              Icons.visibility,
                                              color: Colors.black,
                                            )
                                          : Icon(
                                              Icons.visibility_off,
                                              color: Colors.grey,
                                            ),
                                    ),
                                    enabledBorder: OutlineInputBorder(
                                      borderRadius: BorderRadius.circular(50),
                                      borderSide: BorderSide(
                                        color: Colors.grey,
                                      ),
                                    ),
                                    focusedBorder: OutlineInputBorder(
                                      borderRadius: BorderRadius.circular(50),
                                      borderSide: BorderSide(
                                        color: Colors.black,
                                      ),
                                    ),
                                    hintText: 'Confirm Password ',
                                    label: Text('Confirm Password'),
                                  ),
                                  validator: (value) {
                                    if (value!.isEmpty) {
                                      return 'Password can not be empty';
                                    }
                                    if (value != _passController.text) {
                                      return 'Not Match';
                                    }
                                    return null;
                                  }),
                              SizedBox(
                                height: 20,
                              ),

                              /// 'Sign Up' Button
                              ElevatedButton(
                                  style: ElevatedButton.styleFrom(
                                      fixedSize: Size(150, 50),
                                      shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.circular(50),
                                      )),
                                  //TextButton.styleFrom(minimumSize: Size(150, 50),),
                                  onPressed: () {
                                    gotoLogin(context);
                                  },
                                  child: Text(
                                    'SignUp',
                                    textScaleFactor: 1.5,
                                  )),
                              SizedBox(
                                height: 15,
                              ),

                              /// 'Already have an account?Sign in'
                              TextButton(
                                onPressed: () {
                                  Navigator.pushNamed(context, 'register');
                                },
                                child: Text(
                                  "Already have an account? Sign in",
                                  textAlign: TextAlign.left,
                                  style: TextStyle(
                                    color: Color(0xff4c505b),
                                    fontSize: 15,
                                    fontStyle: FontStyle.italic,
                                  ),
                                ),
                                style: ButtonStyle(),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
