import 'package:flutter/material.dart';
import 'package:reckon_malware/Routes/routes.dart';

class SignUpPage extends StatefulWidget {
  const SignUpPage({Key? key}) : super(key: key);

  @override
  State<SignUpPage> createState() => _SignUpPageState();
}

class _SignUpPageState extends State<SignUpPage> {
  bool checkBoxValue = false;

  /// bool type value declared for suffix icon of password and confirm password field
  bool _isVisiblePass = false;
  bool _isVisibleConPass = false;

  /// A global key named "_key" is declared to validate the all 'text from fields'
  final _key = GlobalKey<FormState>();

  /// navigate to login screen after sign up
  // gotoLogin(BuildContext context) {
  //   if (_key.currentState!.validate()) {
  //     Navigator.pushNamed(context, Routes.login);
  //   }
  // }

  /// all fields controller
  final TextEditingController _passController = TextEditingController();
  final TextEditingController _confirmPassController = TextEditingController();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _userNameController = TextEditingController();

  /// for auto focus
  final _nameFocus = FocusNode();
  final _emailFocus = FocusNode();
  final _passwordFocus = FocusNode();
  final _conPassFocus = FocusNode();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('SigninPage'),
      ),
      backgroundColor: Colors.white,

      body: Container(
        width: double.infinity,
        height: double.infinity,
        decoration: BoxDecoration(
          image: DecorationImage(
            image: AssetImage('assets/images/signup.png'),
            fit: BoxFit.cover,
          ),
        ),
        child: Column(
          children: [
            /// 'Sign Up' text is placed in the front of second container
            Padding(
              padding: const EdgeInsets.all(40.0),
              child: Container(
                margin: EdgeInsets.only(left: 0,right:0,top: 100,),
                padding: EdgeInsets.only(left: 0,right:420,top: 0,),
                child: Text('Create\nAccount',
                  style: TextStyle(
                    wordSpacing: 10,
                    letterSpacing: 5,
                    color:Colors.black,
                    fontSize: 48,
                    fontStyle: FontStyle.italic,
                    fontWeight: FontWeight.bold,
                  ),
                  textAlign: TextAlign.left,
                ),
              ),
            ),

            // SizedBox(
            //   height: 30,
            // ),

            SingleChildScrollView(
              /// Stack
              /// Stack is declared to place all text form fields
              child: Stack(
                children: [
                  Padding(
                    padding: const EdgeInsets.all(50.0),
                    /// Form
                    child: Form(
                      key: _key,
                      child: Column(
                        children: [
                          //Image.asset('assets/images/login.png',height : 100,),

                          /// User name text fields
                          TextFormField(
                            controller: _userNameController,

                            focusNode: _nameFocus,
                            onEditingComplete: () => FocusScope.of(context)
                                .requestFocus(_emailFocus),

                            keyboardType: TextInputType.text,
                            textInputAction: TextInputAction.next,

                            /// decorate username field
                            decoration: InputDecoration(
                              contentPadding: const EdgeInsets.symmetric(
                                vertical: 10,
                              ),
                              prefixIcon: Icon(Icons.person),
                              suffixIcon: IconButton(
                                icon: Icon(Icons.clear),
                                onPressed: () {
                                  _userNameController.clear();
                                },
                              ),
                              enabledBorder: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(50),
                                borderSide: BorderSide(
                                  color: Colors.grey,
                                ),
                              ),
                              focusedBorder: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(50),
                                borderSide: BorderSide(
                                  color: Colors.black,
                                ),
                              ),
                              hintText: 'Enter User Name : ',
                              label: Text('User Name'),
                            ),

                            /// user name validator
                            validator: (value) {
                              if (value!.isEmpty) {
                                return 'user Name cannot empty';
                              }
                              return null;
                            },
                          ),

                          SizedBox(
                            height: 20,
                          ),

                          /// Email field
                          TextFormField(
                            controller: _emailController,
                            focusNode: _emailFocus,
                            onEditingComplete: () => FocusScope.of(context)
                                .requestFocus(_passwordFocus),

                            keyboardType: TextInputType.emailAddress,
                            textInputAction: TextInputAction.next,

                            /// decorate email field
                            decoration: InputDecoration(
                              contentPadding: const EdgeInsets.symmetric(
                                vertical: 10,
                              ),
                              prefixIcon: Icon(Icons.email),
                              suffixIcon: IconButton(
                                icon: Icon(Icons.clear),
                                onPressed: () {
                                  _emailController.clear();
                                },
                              ),
                              enabledBorder: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(50),
                                borderSide: BorderSide(
                                  color: Colors.grey,
                                ),
                              ),
                              focusedBorder: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(50),
                                borderSide: BorderSide(
                                  color: Colors.black,
                                ),
                              ),
                              hintText: 'Enter email address : ',
                              label: Text('Email'),
                            ),

                            /// email validator
                            validator: (value) {
                              RegExp regex =
                              RegExp(r"^[a-z0-9+_.-]+@[a-z.-]+.[a-z]");

                              /**
                                  This email field can take ----------
                                  -> For example : "example@gmail.com"
                                  -> before @ sign only small letter,special character(such as '_' and '.') and numerical value is allowed
                                  -> between "@" and "." sign lower case and special character (such as '.') is allowed
                                  -> after "." only lower case letter is allowed
                               **/

                              if (value!.isEmpty) {
                                return 'Please Enter an email address';
                              }
                              if (!regex.hasMatch(value)) {
                                return 'Please a valid Email';
                              }
                              return null;
                            },
                          ),

                          SizedBox(
                            height: 20,
                          ),

                          /// Password field
                          TextFormField(
                            controller: _passController,

                            focusNode: _passwordFocus,
                            onEditingComplete: () => FocusScope.of(context)
                                .requestFocus(_conPassFocus),

                            keyboardType: TextInputType.text,
                            textInputAction: TextInputAction.next,

                            obscureText: !_isVisiblePass,

                            /// to fix suffix icon
                            decoration: InputDecoration(
                              contentPadding: const EdgeInsets.symmetric(
                                vertical: 10,
                              ),
                              prefixIcon: Icon(Icons.lock),
                              suffixIcon: IconButton(
                                onPressed: () {
                                  setState(() {
                                    _isVisiblePass = !_isVisiblePass;
                                  });
                                },
                                icon: _isVisiblePass
                                    ? Icon(
                                  Icons.visibility,
                                  color: Colors.black,
                                )
                                    : Icon(
                                  Icons.visibility_off,
                                  color: Colors.grey,
                                ),
                              ),
                              enabledBorder: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(50),
                                borderSide: BorderSide(
                                  color: Colors.grey,
                                ),
                              ),
                              focusedBorder: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(50),
                                borderSide: BorderSide(
                                  color: Colors.black,
                                ),
                              ),
                              hintText: 'Enter Password : ',
                              label: Text('Password'),
                            ),

                            /// password validator
                            validator: (value) {
                              RegExp regex = RegExp(
                                  r'^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[!@#\$&*~]).{8,}$');
                              /**
                                  This password field need the following characteristics to validate
                                  -> Must contain uppercase letter
                                  -> Must contain lowercase letter
                                  -> Must contain special character
                                  -> Must contain numerical character
                                  -> Must contain 8 values in minimum
                                  -> No limit in the highest number of characters to validate
                               **/
                              if (value!.isEmpty) {
                                return 'Password can not be empty';
                              }
                              if (!regex.hasMatch(value)) {
                                return 'Password must contain six characters including\nspecial characters, uppercase and lowercase letter';
                              }
                              return null;
                            },
                          ),

                          SizedBox(
                            height: 20,
                          ),

                          /// Confirm password field
                          TextFormField(
                              controller: _confirmPassController,
                              focusNode: _conPassFocus,
                              keyboardType: TextInputType.text,
                              textInputAction: TextInputAction.done,
                              obscureText: !_isVisibleConPass,

                              decoration: InputDecoration(
                                contentPadding: const EdgeInsets.symmetric(
                                  vertical: 10,
                                ),
                                prefixIcon: Icon(Icons.lock),

                                /// to fix suffix icon
                                suffixIcon: IconButton(
                                  onPressed: () {
                                    setState(() {
                                      _isVisibleConPass =
                                      !_isVisibleConPass;
                                    });
                                  },
                                  icon: _isVisibleConPass
                                      ? Icon(
                                    Icons.visibility,
                                    color: Colors.black,
                                  )
                                      : Icon(
                                    Icons.visibility_off,
                                    color: Colors.grey,
                                  ),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(50),
                                  borderSide: BorderSide(
                                    color: Colors.grey,
                                  ),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(50),
                                  borderSide: BorderSide(
                                    color: Colors.black,
                                  ),
                                ),
                                hintText: 'Confirm Password ',
                                label: Text('Confirm Password'),
                              ),

                              validator: (value) {
                                if (value!.isEmpty) {
                                  return 'Password can not be empty';
                                }
                                if (value != _passController.text) {
                                  return 'Not Match';
                                }
                                return null;
                              }),
                          SizedBox(height: 40,),

                          /// By clicling ‘Sign Up’ you accept our privacy and agreement policy
                          Container(
                            //margin: EdgeInsets.only(left: 0,right:0,top: 50,),
                            //padding: EdgeInsets.only(left: 0,right:500,top: 0,),
                            child: Text('By clicling ‘Sign Up’ you accept our privacy and agreement policy',
                              style: TextStyle(
                                color:Colors.black,
                                fontSize: 12,
                                fontStyle: FontStyle.italic,
                                fontWeight: FontWeight.bold,
                              ),
                              textAlign: TextAlign.left,
                            ),
                          ),
                          SizedBox(height: 40),

                          /// 'Sign Up' Button in form of textfield widget
                          Container(
                            alignment: Alignment.centerLeft,
                            child: TextButton(
                              onPressed: () {
                                Navigator.pushNamed(context, Routes.login);
                              },
                              child: Text(
                                "Sign up",
                                textAlign: TextAlign.left,
                                style: TextStyle(
                                  color: Color(0xff4c505b),
                                  fontSize: 48,
                                  fontStyle: FontStyle.italic,
                                ),
                              ),
                            ),
                          ),

                          /// 'Sign Up' Button in form of elevated button widget
                          // Container(
                          //   alignment: Alignment.centerLeft,
                          //   child: ElevatedButton(
                          //       style: ElevatedButton.styleFrom(
                          //         backgroundColor: Colors.transparent,
                          //           fixedSize: Size(150, 50),
                          //           shape: RoundedRectangleBorder(
                          //             borderRadius: BorderRadius.circular(50),
                          //           )),
                          //       //TextButton.styleFrom(minimumSize: Size(150, 50),),
                          //       onPressed: () {
                          //         Navigator.pushNamed(context, Routes.login);
                          //         //gotoLogin(context);
                          //       },
                          //       child: Text(
                          //         'SignUp',
                          //         textScaleFactor: 2,
                          //         style: TextStyle(
                          //           fontStyle: FontStyle.italic,
                          //           color: Colors.black,
                          //         ),
                          //       )),
                          // ),
                          SizedBox(height: 25,),

                          Container(
                            alignment: Alignment.centerRight,
                            child: CircleAvatar(
                              radius: 45,
                              backgroundColor: Colors.orangeAccent,
                              child: IconButton(
                                color: Colors.black,
                                icon: Icon(Icons.arrow_forward,size: 45),
                                alignment: Alignment.center,
                                //alignment: Alignment(0, 5),
                                padding: EdgeInsets.only(top: 0,),
                                onPressed: (){
                                  Navigator.pushNamed(context, Routes.home);
                                },
                              ),
                            ),
                          ),
                          SizedBox(height: 30,),

                          Container(
                            //margin: EdgeInsets.only(left: 114,top: 755,),
                            alignment: Alignment.center,
                            child: Text(
                              '© Team Wreck-On',
                              style: TextStyle(
                                color: Colors.grey[400],
                                fontSize:15,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
